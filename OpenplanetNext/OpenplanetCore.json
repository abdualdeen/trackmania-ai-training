{"op":"1.25.15 (next, Public, 2022-09-29)","functions":[{"ns":"string","name":"Join","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":268438621,"typename":"array","typedecl":"string[]","typeflags":5,"name":"arr"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"delimiter"}],"decl":"string Join(const string[]&in arr, const string&in delimiter)","group":"Core","desc":"Join an array of strings into a single where each item is separated using the given delimiter."},{"ns":"Math","name":"Slerp","returntypeid":67108898,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[{"typeid":67108898,"typename":"quat","typedecl":"quat","typeflags":5,"name":"a"},{"typeid":67108898,"typename":"quat","typedecl":"quat","typeflags":5,"name":"b"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"quat Slerp(const quat&in a, const quat&in b, float x)"},{"ns":"mat3","name":"Identity","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[],"decl":"mat3 Identity()","group":"Math","desc":""},{"ns":"mat3","name":"Translate","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"}],"decl":"mat3 Translate(const vec2&in v)","group":"Math","desc":""},{"ns":"mat3","name":"Rotate","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"mat3 Rotate(float angle)","group":"Math","desc":""},{"ns":"mat3","name":"Scale","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"scale"}],"decl":"mat3 Scale(const vec2&in scale)","group":"Math","desc":""},{"ns":"mat3","name":"Scale","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scale"}],"decl":"mat3 Scale(float scale)","group":"Math","desc":""},{"ns":"mat3","name":"Inverse","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108900,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3 Inverse(const mat3&in)","group":"Math","desc":""},{"ns":"mat4","name":"Identity","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[],"decl":"mat4 Identity()","group":"Math","desc":""},{"ns":"mat4","name":"Translate","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"}],"decl":"mat4 Translate(const vec3&in v)","group":"Math","desc":""},{"ns":"mat4","name":"Rotate","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"dir"}],"decl":"mat4 Rotate(float angle, const vec3&in dir)","group":"Math","desc":""},{"ns":"mat4","name":"Scale","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"scale"}],"decl":"mat4 Scale(const vec3&in scale)","group":"Math","desc":""},{"ns":"mat4","name":"Scale","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scale"}],"decl":"mat4 Scale(float scale)","group":"Math","desc":""},{"ns":"mat4","name":"Perspective","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"yFov"},{"typedecl":"float","typeflags":0,"name":"aspect"},{"typedecl":"float","typeflags":0,"name":"nearZ"},{"typedecl":"float","typeflags":0,"name":"farZ"}],"decl":"mat4 Perspective(float yFov, float aspect, float nearZ, float farZ)","group":"Math","desc":""},{"ns":"mat4","name":"Inverse","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108902,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4 Inverse(const mat4&in)","group":"Math","desc":""},{"ns":"Math","name":"Abs","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"i"}],"decl":"int Abs(int i)","group":"Math","desc":""},{"ns":"Math","name":"Abs","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Abs(float f)","group":"Math","desc":""},{"ns":"Math","name":"Sin","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Sin(float f)","group":"Math","desc":""},{"ns":"Math","name":"Asin","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Asin(float f)","group":"Math","desc":""},{"ns":"Math","name":"Cos","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Cos(float f)","group":"Math","desc":""},{"ns":"Math","name":"Acos","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Acos(float f)","group":"Math","desc":""},{"ns":"Math","name":"Tan","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Tan(float f)","group":"Math","desc":""},{"ns":"Math","name":"Atan","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Atan(float f)","group":"Math","desc":""},{"ns":"Math","name":"Atan2","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"float Atan2(float y, float x)","group":"Math","desc":""},{"ns":"Math","name":"Exp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Exp(float f)","group":"Math","desc":""},{"ns":"Math","name":"Pow","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"float Pow(float x, float y)","group":"Math","desc":""},{"ns":"Math","name":"Sqrt","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Sqrt(float f)","group":"Math","desc":""},{"ns":"Math","name":"ToDeg","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"rad"}],"decl":"float ToDeg(float rad)","group":"Math","desc":""},{"ns":"Math","name":"ToRad","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"deg"}],"decl":"float ToRad(float deg)","group":"Math","desc":""},{"ns":"Math","name":"Rand","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"}],"decl":"float Rand(float min, float max)","group":"Math","desc":"Generate a random floating point value between min (inclusive) and max (exclusive)."},{"ns":"Math","name":"Rand","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"}],"decl":"int Rand(int min, int max)","group":"Math","desc":"Generate a random integer between min (inclusive) and max (exclusive)."},{"ns":"Math","name":"Log","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Log(float f)","group":"Math","desc":""},{"ns":"Math","name":"Log2","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Log2(float f)","group":"Math","desc":""},{"ns":"Math","name":"Log10","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Log10(float f)","group":"Math","desc":""},{"ns":"Math","name":"Log1p","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Log1p(float f)","group":"Math","desc":""},{"ns":"Math","name":"Logb","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Logb(float f)","group":"Math","desc":""},{"ns":"Math","name":"Floor","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Floor(float f)","group":"Math","desc":""},{"ns":"Math","name":"Ceil","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Ceil(float f)","group":"Math","desc":""},{"ns":"Math","name":"Round","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Round(float f)","group":"Math","desc":""},{"ns":"Math","name":"InvLerp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":5,"name":"min"},{"typedecl":"float","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":5,"name":"value"}],"decl":"float InvLerp(const float&in min, const float&in max, const float&in value)","group":"Math","desc":""},{"ns":"Math","name":"InvLerp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"int","typeflags":5,"name":"min"},{"typedecl":"int","typeflags":5,"name":"max"},{"typedecl":"int","typeflags":5,"name":"value"}],"decl":"float InvLerp(const int&in min, const int&in max, const int&in value)","group":"Math","desc":""},{"ns":"Math","name":"Lerp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":5,"name":"min"},{"typedecl":"float","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"float Lerp(const float&in min, const float&in max, float x)","group":"Math","desc":""},{"ns":"Math","name":"Lerp","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"min"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"vec2 Lerp(const vec2&in min, const vec2&in max, float x)","group":"Math","desc":""},{"ns":"Math","name":"Lerp","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"min"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"vec3 Lerp(const vec3&in min, const vec3&in max, float x)","group":"Math","desc":""},{"ns":"Math","name":"Lerp","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"min"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"vec4 Lerp(const vec4&in min, const vec4&in max, float x)","group":"Math","desc":""},{"ns":"Math","name":"Distance2","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"}],"decl":"float Distance2(const vec2&in a, const vec2&in b)","group":"Math","desc":""},{"ns":"Math","name":"Distance2","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"float Distance2(const vec3&in a, const vec3&in b)","group":"Math","desc":""},{"ns":"Math","name":"Distance","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"}],"decl":"float Distance(const vec2&in a, const vec2&in b)","group":"Math","desc":""},{"ns":"Math","name":"Distance","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"float Distance(const vec3&in a, const vec3&in b)","group":"Math","desc":""},{"ns":"Math","name":"Dot","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"}],"decl":"float Dot(const vec2&in a, const vec2&in b)","group":"Math","desc":""},{"ns":"Math","name":"Dot","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"float Dot(const vec3&in a, const vec3&in b)","group":"Math","desc":""},{"ns":"Math","name":"Angle","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"}],"decl":"float Angle(const vec2&in a, const vec2&in b)","group":"Math","desc":""},{"ns":"Math","name":"Angle","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"float Angle(const vec3&in a, const vec3&in b)","group":"Math","desc":""},{"ns":"Math","name":"Cross","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"vec3 Cross(const vec3&in a, const vec3&in b)","group":"Math","desc":""},{"ns":"Math","name":"Min","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"}],"decl":"int Min(int x, int y)","group":"Math","desc":""},{"ns":"Math","name":"Min","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"float Min(float x, float y)","group":"Math","desc":""},{"ns":"Math","name":"Max","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"}],"decl":"int Max(int x, int y)","group":"Math","desc":""},{"ns":"Math","name":"Max","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"float Max(float x, float y)","group":"Math","desc":""},{"ns":"Math","name":"Clamp","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"}],"decl":"int Clamp(int x, int min, int max)","group":"Math","desc":""},{"ns":"Math","name":"Clamp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"}],"decl":"float Clamp(float x, float min, float max)","group":"Math","desc":""},{"ns":"Math","name":"IsNaN","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"bool IsNaN(float)","group":"Math","desc":""},{"ns":"Math","name":"IsInf","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"bool IsInf(float)","group":"Math","desc":""},{"ns":"Math","name":"SwapBytes","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":""}],"decl":"uint16 SwapBytes(uint16)","group":"Math","desc":""},{"ns":"Math","name":"SwapBytes","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"uint SwapBytes(uint)","group":"Math","desc":""},{"ns":"Math","name":"SwapBytes","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"uint64 SwapBytes(uint64)","group":"Math","desc":""},{"ns":"Time","name":"get_Now","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 get_Now()","group":"Time","desc":"Gets the time (in milliseconds) since the game started."},{"ns":"Time","name":"get_Stamp","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 get_Stamp()","group":"Time","desc":"Gets the current machine timestamp in seconds. Also commonly referred to as epoch time."},{"ns":"Time","name":"FormatString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int64","typeflags":0,"name":"stamp","default":"- 1"}],"decl":"string FormatString(const string&in format, int64 stamp = - 1)","group":"Time","desc":"Format a time into the given format as specified by strftime in the local time."},{"ns":"Time","name":"FormatStringUTC","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int64","typeflags":0,"name":"stamp","default":"- 1"}],"decl":"string FormatStringUTC(const string&in format, int64 stamp = - 1)","group":"Time","desc":"Format a time into the given format as specified by strftime in UTC."},{"ns":"Time","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"time"},{"typedecl":"bool","typeflags":0,"name":"fractions","default":"true"},{"typedecl":"bool","typeflags":0,"name":"forceMinutes","default":"true"},{"typedecl":"bool","typeflags":0,"name":"forceHours","default":"false"},{"typedecl":"bool","typeflags":0,"name":"short","default":"false"}],"decl":"string Format(uint64 time, bool fractions = true, bool forceMinutes = true, bool forceHours = false, bool short = false)","group":"Time","desc":"Format a game time (in milliseconds) to its race time representation. For example, 61234 will be \"1:01.234\"."},{"ns":"Time","name":"ParseRelativeTime","returntypedecl":"uint64","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"time"}],"decl":"uint64 ParseRelativeTime(const string&in time)","group":"Time","desc":"Parses a relative game time from its race time representation."},{"ns":"Time","name":"Parse","returntypeid":67108906,"returntypename":"Info","returntypedecl":"Time::Info","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"stamp","default":"- 1"}],"decl":"Info Parse(int64 stamp = - 1)","group":"Time","desc":"Parses a time into a structure containing individial time components in the local time."},{"ns":"Time","name":"ParseUTC","returntypeid":67108906,"returntypename":"Info","returntypedecl":"Time::Info","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"stamp","default":"- 1"}],"decl":"Info ParseUTC(int64 stamp = - 1)","group":"Time","desc":"Parses a time into a structure containing individial time components in UTC."},{"ns":"Text","name":"ParseInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"int ParseInt(const string&in str)","group":"Text","desc":"Parses the given string as an integer."},{"ns":"Text","name":"ParseInt64","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"int ParseInt64(const string&in str)","group":"Text","desc":"Parses the given string as a 64 bit integer."},{"ns":"Text","name":"ParseUInt","returntypedecl":"uint","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"uint ParseUInt(const string&in str)","group":"Text","desc":"Parses the given string as an unsigned integer."},{"ns":"Text","name":"ParseUInt64","returntypedecl":"uint","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"uint ParseUInt64(const string&in str)","group":"Text","desc":"Parses the given string as a 64 bit unsigned integer."},{"ns":"Text","name":"ParseFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"float ParseFloat(const string&in str)","group":"Text","desc":"Parses the given string as a float."},{"ns":"Text","name":"ParseDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"double ParseDouble(const string&in str)","group":"Text","desc":"Parses the given string as a double."},{"ns":"Text","name":"ParseHexColor","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"str"}],"decl":"vec4 ParseHexColor(string str)","group":"Text","desc":"Parses the given string as a hexadecimal color such as \"#FF0000\"."},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int8","typeflags":0,"name":""}],"decl":"string Format(const string&in format, int8)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int16","typeflags":0,"name":""}],"decl":"string Format(const string&in format, int16)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int","typeflags":0,"name":""}],"decl":"string Format(const string&in format, int)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int64","typeflags":0,"name":""}],"decl":"string Format(const string&in format, int64)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"uint8","typeflags":0,"name":""}],"decl":"string Format(const string&in format, uint8)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"uint16","typeflags":0,"name":""}],"decl":"string Format(const string&in format, uint16)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"uint","typeflags":0,"name":""}],"decl":"string Format(const string&in format, uint)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"string Format(const string&in format, uint64)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"float","typeflags":0,"name":""}],"decl":"string Format(const string&in format, float)","group":"Text","desc":""},{"ns":"Text","name":"Format","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"double","typeflags":0,"name":""}],"decl":"string Format(const string&in format, double)","group":"Text","desc":""},{"ns":"Text","name":"FormatPointer","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"string FormatPointer(uint64 ptr)","group":"Text","desc":"Formats a pointer to its more representative hexadecimal format, for example: 0x12345678"},{"ns":"Net","name":"HttpGet","returntypeid":1140850732,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"HttpRequest@ HttpGet(const string&in url)","group":"Net","desc":"Creates an HTTP GET request to the given URL and automatically starts the request."},{"ns":"Net","name":"HttpPost","returntypeid":1140850732,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"url"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"data","default":"\"\""},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"contentType","default":"\"application/x-www-form-urlencoded\""}],"decl":"HttpRequest@ HttpPost(const string&in url, const string&in data = \"\", const string&in contentType = \"application/x-www-form-urlencoded\")","group":"Net","desc":"Creates an HTTP POST request to the given URL and automatically starts the request."},{"ns":"Net","name":"HttpHead","returntypeid":1140850732,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"HttpRequest@ HttpHead(const string&in url)","group":"Net","desc":"Creates an HTTP HEAD request to the given URL and automatically starts the request."},{"ns":"Net","name":"HttpPut","returntypeid":1140850732,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"url"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"data","default":"\"\""},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"contentType","default":"\"application/x-www-form-urlencoded\""}],"decl":"HttpRequest@ HttpPut(const string&in url, const string&in data = \"\", const string&in contentType = \"application/x-www-form-urlencoded\")","group":"Net","desc":"Creates an HTTP PUT request to the given URL and automatically starts the request."},{"ns":"Net","name":"HttpDelete","returntypeid":1140850732,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"HttpRequest@ HttpDelete(const string&in url)","group":"Net","desc":"Creates an HTTP DELETE request to the given URL and automatically starts the request."},{"ns":"Net","name":"HttpPatch","returntypeid":1140850732,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"url"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"data","default":"\"\""},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"contentType","default":"\"application/x-www-form-urlencoded\""}],"decl":"HttpRequest@ HttpPatch(const string&in url, const string&in data = \"\", const string&in contentType = \"application/x-www-form-urlencoded\")","group":"Net","desc":"Creates an HTTP PATCH request to the given URL and automatically starts the request."},{"ns":"Net","name":"UrlEncode","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"string UrlEncode(const string&in str)","group":"Net","desc":"URL encode a string."},{"ns":"Net","name":"UrlDecode","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"string UrlDecode(const string&in str)","group":"Net","desc":"URL decode a string."},{"ns":"Reflection","name":"GetType","returntypeid":1677721648,"returntypename":"MwClassInfo","returntypedecl":"const Reflection::MwClassInfo@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"const MwClassInfo@ GetType(const string&in name)","group":"Reflection","desc":"Get the type info of the given name."},{"ns":"Reflection","name":"GetType","returntypeid":1677721648,"returntypename":"MwClassInfo","returntypedecl":"const Reflection::MwClassInfo@","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"id"}],"decl":"const MwClassInfo@ GetType(uint id)","group":"Reflection","desc":"Get the type info of the given ID."},{"ns":"Reflection","name":"TypeOf","returntypeid":1677721648,"returntypename":"MwClassInfo","returntypedecl":"const Reflection::MwClassInfo@","returntypeflags":0,"args":[{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"nod"}],"decl":"const MwClassInfo@ TypeOf(CMwNod@ nod)","group":"Reflection","desc":"Get the type info of the given nod."},{"ns":"Reflection","name":"GetRefCount","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"nod"}],"decl":"int GetRefCount(CMwNod@ nod)","group":"Reflection","desc":"Get the reference count of the given nod."},{"ns":"Meta","name":"ExecutingPlugin","returntypeid":1140850741,"returntypename":"Plugin","returntypedecl":"Meta::Plugin@","returntypeflags":0,"args":[],"decl":"Plugin@ ExecutingPlugin()","group":"Meta","desc":"Gets the currently executing plugin."},{"ns":"Meta","name":"AllPlugins","returntypeid":1342180446,"returntypename":"array","returntypedecl":"Meta::Plugin@[]@","returntypeflags":0,"args":[],"decl":"Plugin@[]@ AllPlugins()","group":"Meta","desc":"Gets all plugins that are loaded."},{"ns":"Meta","name":"UnloadedPlugins","returntypeid":1342180447,"returntypename":"array","returntypedecl":"Meta::UnloadedPluginInfo[]@","returntypeflags":0,"args":[],"decl":"UnloadedPluginInfo[]@ UnloadedPlugins()","group":"Meta","desc":"Gets the identifiers of all unloaded plugins. Note that this function may be slow!"},{"ns":"Meta","name":"GetPluginFromID","returntypeid":1140850741,"returntypename":"Plugin","returntypedecl":"Meta::Plugin@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"Plugin@ GetPluginFromID(const string&in id)","group":"Meta","desc":"Gets a plugin from its ID."},{"ns":"Meta","name":"GetPluginFromSiteID","returntypeid":1140850741,"returntypename":"Plugin","returntypedecl":"Meta::Plugin@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"siteID"}],"decl":"Plugin@ GetPluginFromSiteID(int siteID)","group":"Meta","desc":"Gets a plugin from its site ID, if set."},{"ns":"Meta","name":"LoadPlugin","returntypeid":1140850741,"returntypename":"Plugin","returntypedecl":"Meta::Plugin@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typeid":50,"typename":"PluginSource","typedecl":"Meta::PluginSource","typeflags":0,"name":"source"},{"typeid":49,"typename":"PluginType","typedecl":"Meta::PluginType","typeflags":0,"name":"type"}],"decl":"Plugin@ LoadPlugin(const string&in path, PluginSource source, PluginType type)","group":"Meta","desc":"Loads a plugin into memory from the given absolute path and returns a handle to the plugin."},{"ns":"Meta","name":"UnloadPlugin","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850741,"typename":"Plugin","typedecl":"Meta::Plugin@","typeflags":0,"name":"plugin"}],"decl":"void UnloadPlugin(Plugin@ plugin)","group":"Meta","desc":"Queues a plugin to be unloaded from memory completely. Note that this will invalidate the plugin object passed in on the next frame! Do not use the Plugin handle after calling this!"},{"ns":"Meta","name":"IsDeveloperMode","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsDeveloperMode()","group":"Meta","desc":"Returns true if developer mode is currently enabled."},{"ns":"Meta","name":"OpenplanetVersion","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string OpenplanetVersion()","group":"Core","desc":"Returns the current version of Openplanet."},{"ns":"Meta","name":"OpenplanetVersionDate","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string OpenplanetVersionDate()","group":"Core","desc":"Returns the current date of Openplanet's build."},{"ns":"Meta","name":"OpenplanetBuildInfo","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string OpenplanetBuildInfo()","group":"Core","desc":"Returns the current build info of Openplanet's build."},{"ns":"Meta","name":"LoadOverlayStyle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"void LoadOverlayStyle(const string&in path)"},{"ns":"Meta","name":"ReloadOverlayStyle","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ReloadOverlayStyle()"},{"ns":"Meta","name":"ResetOverlayStyle","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ResetOverlayStyle()"},{"ns":"Dev","name":"Sleep","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"ms"}],"decl":"void Sleep(uint ms)","group":"Dev","desc":""},{"ns":"Dev","name":"BaseAddress","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 BaseAddress()","group":"Dev","desc":""},{"ns":"Dev","name":"BaseAddressEnd","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 BaseAddressEnd()","group":"Dev","desc":""},{"ns":"Dev","name":"FindPattern","returntypedecl":"uint64","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"}],"decl":"uint64 FindPattern(const string&in pattern)","group":"Dev","desc":""},{"ns":"Dev","name":"Patch","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"}],"decl":"string Patch(uint64 ptr, const string&in pattern)","group":"Dev","desc":"Returns the original bytes as a backup."},{"ns":"Dev","name":"Hook","returntypeid":1140850749,"returntypename":"HookInfo","returntypedecl":"Dev::HookInfo@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr","desc":"The pointer"},{"typedecl":"int","typeflags":0,"name":"padding","desc":"The padding"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"func","desc":"The name of the function to call"},{"typedecl":"int","typeflags":0,"name":"pushRegisters","default":"0","desc":"Which registers to push (see `Dev::PushRegisters`)"}],"decl":"HookInfo@ Hook(uint64 ptr, int padding, const string&in func, int pushRegisters = 0)","group":"Dev","desc":"Hooks directly into game code. This requires manual unhooking in the `OnDestroyed` callback. The function accepts arbitrarily-ordered parameters named as x86 registers. For example, you could set a parameter `CMwNod@ rcx`."},{"ns":"Dev","name":"Unhook","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850749,"typename":"HookInfo","typedecl":"Dev::HookInfo@","typeflags":0,"name":"hook"}],"decl":"void Unhook(HookInfo@ hook)","group":"Dev","desc":"Unhooks a registered hook. You're required to manually call this in the `OnDestroyed` callback."},{"ns":"Dev","name":"InterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"},{"typeid":1140850750,"typename":"ProcIntercept","typedecl":"Dev::ProcIntercept@","typeflags":0,"name":"func"}],"decl":"void InterceptProc(const string&in className, const string&in procName, ProcIntercept@ func)","group":"Dev","desc":""},{"ns":"Dev","name":"InterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"},{"typeid":1140850751,"typename":"ProcInterceptEx","typedecl":"Dev::ProcInterceptEx@","typeflags":0,"name":"func"}],"decl":"void InterceptProc(const string&in className, const string&in procName, ProcInterceptEx@ func)","group":"Dev","desc":""},{"ns":"Dev","name":"ResetInterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"}],"decl":"void ResetInterceptProc(const string&in className, const string&in procName)","group":"Dev","desc":""},{"ns":"Dev","name":"ResetInterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"},{"typeid":1140850750,"typename":"ProcIntercept","typedecl":"Dev::ProcIntercept@","typeflags":0,"name":"func"}],"decl":"void ResetInterceptProc(const string&in className, const string&in procName, ProcIntercept@ func)","group":"Dev","desc":""},{"ns":"Dev","name":"ResetInterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"},{"typeid":1140850751,"typename":"ProcInterceptEx","typedecl":"Dev::ProcInterceptEx@","typeflags":0,"name":"func"}],"decl":"void ResetInterceptProc(const string&in className, const string&in procName, ProcInterceptEx@ func)","group":"Dev","desc":""},{"ns":"Dev","name":"Allocate","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"size"},{"typedecl":"bool","typeflags":0,"name":"executable","default":"false"}],"decl":"uint64 Allocate(uint size, bool executable = false)","group":"Dev","desc":""},{"ns":"Dev","name":"Free","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"void Free(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"DebugBreak","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void DebugBreak()","group":"Dev","desc":""},{"ns":"Dev","name":"Read","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"string Read(uint64 ptr, uint64 size)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int8 ReadInt8(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int16 ReadInt16(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int ReadInt32(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int64 ReadInt64(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint8 ReadUInt8(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint16 ReadUInt16(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint ReadUInt32(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint64 ReadUInt64(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"float ReadFloat(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"double ReadDouble(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadVec2","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec2 ReadVec2(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadVec3","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec3 ReadVec3(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadVec4","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec4 ReadVec4(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadIso3","returntypeid":67108899,"returntypename":"iso3","returntypedecl":"iso3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"iso3 ReadIso3(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadIso4","returntypeid":67108901,"returntypename":"iso4","returntypedecl":"iso4","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"iso4 ReadIso4(uint64 ptr)","group":"Dev","desc":""},{"ns":"Dev","name":"ReadString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"string ReadString(uint64 ptr, uint length)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"}],"decl":"void Write(uint64 ptr, const string&in pattern)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int8","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, int8 i)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int16","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, int16 i)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, int i)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int64","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, int64 i)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint8","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, uint8 i)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint16","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, uint16 i)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, uint i)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint64","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, uint64 i)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"void Write(uint64 ptr, float f)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"double","typeflags":0,"name":"f"}],"decl":"void Write(uint64 ptr, double f)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const vec2&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const vec3&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const vec4&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108899,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const iso3&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108901,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const iso4&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"WriteString","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void WriteString(uint64 ptr, const string&in str)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int8 GetOffsetInt8(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int16 GetOffsetInt16(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int GetOffsetInt32(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int64 GetOffsetInt64(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetUint8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"uint8 GetOffsetUint8(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetUint16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"uint16 GetOffsetUint16(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetUint32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"uint GetOffsetUint32(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetUint64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"uint64 GetOffsetUint64(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"float GetOffsetFloat(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"double GetOffsetDouble(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetVec2","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"vec2 GetOffsetVec2(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetVec3","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"vec3 GetOffsetVec3(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetVec4","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"vec4 GetOffsetVec4(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetIso3","returntypeid":67108899,"returntypename":"iso3","returntypedecl":"iso3","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"iso3 GetOffsetIso3(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetIso4","returntypeid":67108901,"returntypename":"iso4","returntypedecl":"iso4","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"iso4 GetOffsetIso4(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"CMwNod@ GetOffsetNod(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"GetOffsetString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"string GetOffsetString(const ?&in nod, uint offset)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"int8","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int8&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"int16","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int16&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"int","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"int64","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int64&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"uint8","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const uint8&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"uint16","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const uint16&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"uint","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const uint&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"uint64","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const uint64&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"float","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const float&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"double","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const double&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const vec2&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const vec3&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const vec4&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108899,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const iso3&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108901,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const iso4&in v)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"newNod"}],"decl":"void SetOffset(const ?&in nod, uint offset, CMwNod@ newNod)","group":"Dev","desc":""},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void SetOffset(const ?&in nod, uint offset, const string&in str)","group":"Dev","desc":""},{"ns":"Permissions","name":"DisplayClubAds","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool DisplayClubAds()","group":"Permissions","desc":"User can see ads about club edition"},{"ns":"Permissions","name":"DisplayStandardAds","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool DisplayStandardAds()","group":"Permissions","desc":"User can see ads about standard edition"},{"ns":"Permissions","name":"CanRemoveAds","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanRemoveAds()","group":"Permissions","desc":"User can remove ads"},{"ns":"Permissions","name":"CreateItemAndMod","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateItemAndMod()","group":"Permissions","desc":"User can create items and mods"},{"ns":"Permissions","name":"CreateLocalMap","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateLocalMap()","group":"Permissions","desc":"User can create a map locally"},{"ns":"Permissions","name":"CreateLocalReplay","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateLocalReplay()","group":"Permissions","desc":"User can save a video in the replay editor"},{"ns":"Permissions","name":"CreateLocalSkin","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateLocalSkin()","group":"Permissions","desc":"User can create a skin locally"},{"ns":"Permissions","name":"PlayRecords","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayRecords()","group":"Permissions","desc":"User can play against map's records"},{"ns":"Permissions","name":"ViewRecords","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool ViewRecords()","group":"Permissions","desc":"User can view the map's records"},{"ns":"Permissions","name":"ViewPBGhostMultiplayer","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool ViewPBGhostMultiplayer()","group":"Permissions","desc":"User can view their PB ghost when playing in multiplayer modes"},{"ns":"Permissions","name":"InGameChat","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool InGameChat()","group":"Permissions","desc":"User can chat ingame"},{"ns":"Permissions","name":"OpenAdvancedMapEditor","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenAdvancedMapEditor()","group":"Permissions","desc":"User can open the advanced map editor"},{"ns":"Permissions","name":"OpenReplayEditor","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenReplayEditor()","group":"Permissions","desc":"User can open the replay editor"},{"ns":"Permissions","name":"OpenSimpleMapEditor","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenSimpleMapEditor()","group":"Permissions","desc":"User can open the simple map editor"},{"ns":"Permissions","name":"OpenSkinEditor","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenSkinEditor()","group":"Permissions","desc":"User can open the skin editor"},{"ns":"Permissions","name":"PlayAgainstReplay","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayAgainstReplay()","group":"Permissions","desc":"User can play against a replay"},{"ns":"Permissions","name":"PlayArcadeChannel","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayArcadeChannel()","group":"Permissions","desc":"User can play on the arcade channel"},{"ns":"Permissions","name":"PlayCurrentOfficialMonthlyCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayCurrentOfficialMonthlyCampaign()","group":"Permissions","desc":"User can play the current official monthly campaign"},{"ns":"Permissions","name":"PlayCurrentOfficialQuarterlyCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayCurrentOfficialQuarterlyCampaign()","group":"Permissions","desc":"User can play the current official quarterly campaign"},{"ns":"Permissions","name":"PlayHotSeat","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayHotSeat()","group":"Permissions","desc":"User can play the HotSeat mode"},{"ns":"Permissions","name":"PlayLocalMap","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayLocalMap()","group":"Permissions","desc":"User can play a local map"},{"ns":"Permissions","name":"PlayMatchmaking","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayMatchmaking()","group":"Permissions","desc":"User can play matchmaking"},{"ns":"Permissions","name":"PlayOnlineCompetition","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayOnlineCompetition()","group":"Permissions","desc":"User can play online competitions"},{"ns":"Permissions","name":"PlayPastOfficialMonthlyCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPastOfficialMonthlyCampaign()","group":"Permissions","desc":"User can play the past official monthly campaigns"},{"ns":"Permissions","name":"PlayPastOfficialQuarterlyCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPastOfficialQuarterlyCampaign()","group":"Permissions","desc":"User can play the past official quarterly campaigns"},{"ns":"Permissions","name":"PlayPublicClubCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPublicClubCampaign()","group":"Permissions","desc":"User can play public club campaigns"},{"ns":"Permissions","name":"PlayPublicClubRoom","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPublicClubRoom()","group":"Permissions","desc":"User can play on the public club rooms"},{"ns":"Permissions","name":"PlaySplitscreen","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlaySplitscreen()","group":"Permissions","desc":"User can play the splitscreen mode"},{"ns":"Permissions","name":"PlayTOTDChannel","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayTOTDChannel()","group":"Permissions","desc":"User can play the TOTD channel and COTD"},{"ns":"Permissions","name":"CreateClub","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateClub()","group":"Permissions","desc":"User can create a club"},{"ns":"Permissions","name":"CreateActivity","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateActivity()","group":"Permissions","desc":"User can create a club activity"},{"ns":"Permissions","name":"CreateClubCompetition","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateClubCompetition()","group":"Permissions","desc":"User can create a competition in a club"},{"ns":"Permissions","name":"ViewClub","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool ViewClub()","group":"Permissions","desc":"User can display a club page"},{"ns":"Permissions","name":"JoinClub","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool JoinClub()","group":"Permissions","desc":"User can join a club"},{"ns":"Permissions","name":"PlayPrivateActivity","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPrivateActivity()","group":"Permissions","desc":"User can play a private club activity"},{"ns":"Permissions","name":"UseCustomCollection","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool UseCustomCollection()","group":"Permissions","desc":"User can use a custom item collection"},{"ns":"Permissions","name":"AccessServerReview","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool AccessServerReview()","group":"Permissions","desc":"User can access the server review"},{"ns":"Permissions","name":"CreateAndUploadMap","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateAndUploadMap()","group":"Permissions","desc":"User can upload a map to server review"},{"ns":"Permissions","name":"CreateGameMode","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateGameMode()","group":"Permissions","desc":"User can create game modes"},{"ns":"Permissions","name":"CreateLocalServer","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateLocalServer()","group":"Permissions","desc":"User can create a local server"},{"ns":"Permissions","name":"FindLocalServer","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool FindLocalServer()","group":"Permissions","desc":"User can find a local server"},{"ns":"Permissions","name":"CreateAndUploadSkin","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateAndUploadSkin()","group":"Permissions","desc":"User can save a skin (upload)"},{"ns":"Permissions","name":"UseCustomSkin","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool UseCustomSkin()","group":"Permissions","desc":"User can use a custom skin"},{"ns":"Permissions","name":"CanSubscribeToClub","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanSubscribeToClub()","group":"Permissions","desc":"User can upgrade its game to the club edition"},{"ns":"Permissions","name":"CanSubscribeToStandard","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanSubscribeToStandard()","group":"Permissions","desc":"User can upgrade its game to the standard edition"},{"ns":"Permissions","name":"GainXP","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool GainXP()","group":"Permissions","desc":"User can play gain experience points"},{"ns":"Regex","name":"Replace","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"replace"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex :: Flags :: ECMAScript"}],"decl":"string Replace(const string&in source, const string&in pattern, const string&in replace, int flags = Regex :: Flags :: ECMAScript)","group":"Regex","desc":"Perform a regex search and replace on the given string."},{"ns":"Regex","name":"IsMatch","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex :: Flags :: ECMAScript"}],"decl":"bool IsMatch(const string&in source, const string&in pattern, int flags = Regex :: Flags :: ECMAScript)","group":"Regex","desc":"Perform a regex match on the source string and returns true if it matches."},{"ns":"Regex","name":"Contains","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex :: Flags :: ECMAScript"}],"decl":"bool Contains(const string&in source, const string&in pattern, int flags = Regex :: Flags :: ECMAScript)","group":"Regex","desc":"Perform a regex match on the source string and returns true if it contains the pattern."},{"ns":"Regex","name":"Match","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex :: Flags :: ECMAScript"}],"decl":"string[]@ Match(const string&in source, const string&in pattern, int flags = Regex :: Flags :: ECMAScript)","group":"Regex","desc":"Performs a regex match on the source string and returns the matched groups if it matches, or an empty array if it doesn't."},{"ns":"Regex","name":"Search","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex :: Flags :: ECMAScript"}],"decl":"string[]@ Search(const string&in source, const string&in pattern, int flags = Regex :: Flags :: ECMAScript)","group":"Regex","desc":"Searches for a regex match on the source string and returns the matched groups if it matches, or an empty array if it doesn't."},{"ns":"Regex","name":"SearchAll","returntypeid":1140850753,"returntypename":"SearchAllResult","returntypedecl":"Regex::SearchAllResult@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex :: Flags :: ECMAScript"}],"decl":"SearchAllResult@ SearchAll(const string&in source, const string&in pattern, int flags = Regex :: Flags :: ECMAScript)","group":"Regex","desc":"Searches for a regex match on the source string and returns all the matches."},{"ns":"Audio","name":"LoadSample","returntypeid":1140850754,"returntypename":"Sample","returntypedecl":"Audio::Sample@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the sound to load. Must be relative to the root of your plugin."}],"decl":"Sample@ LoadSample(const string&in filename)","group":"Resources","desc":"Load a sound."},{"ns":"Audio","name":"Play","returntypeid":1140850755,"returntypename":"Voice","returntypedecl":"Audio::Voice@","returntypeflags":0,"args":[{"typeid":1140850754,"typename":"Sample","typedecl":"Audio::Sample@","typeflags":0,"name":"sample"},{"typedecl":"float","typeflags":0,"name":"gain","default":"1.0f"}],"decl":"Voice@ Play(Sample@ sample, float gain = 1.0f)","group":"Audio","desc":"Plays the given sample and returns the voice, immediately starting playback."},{"ns":"Audio","name":"Start","returntypeid":1140850755,"returntypename":"Voice","returntypedecl":"Audio::Voice@","returntypeflags":0,"args":[{"typeid":1140850754,"typename":"Sample","typedecl":"Audio::Sample@","typeflags":0,"name":"sample"}],"decl":"Voice@ Start(Sample@ sample)","group":"Audio","desc":"Starts the given sample and returns the voice, but does not immediately begin playback. Use this if you want to modify voice parameters before the first audio frames play. Note that if you don't let a sample play out, it will leak memory!"},{"ns":"Json","name":"Object","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Value@ Object()","group":"Json","desc":"Create a new Json object value."},{"ns":"Json","name":"Array","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Value@ Array()","group":"Json","desc":"Create a new Json array value."},{"ns":"Json","name":"Parse","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"json"}],"decl":"Value@ Parse(const string&in json)","group":"Json","desc":"Deserializes (parses) a string into a Json value tree."},{"ns":"Json","name":"Write","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":1677721669,"typename":"Value","typedecl":"const Json::Value@","typeflags":0,"name":"value"}],"decl":"string Write(const Value@ value)","group":"Json","desc":"Serializes a Json value tree to a string."},{"ns":"Json","name":"FromFile","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"Value@ FromFile(const string&in filename)","group":"Json","desc":"Deserialize (parses) contents of a file into a Json value tree. This can either be a file on disk or a file that's part of the plugin hierarchy."},{"ns":"Json","name":"ToFile","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"},{"typeid":1677721669,"typename":"Value","typedecl":"const Json::Value@","typeflags":0,"name":"value"}],"decl":"void ToFile(const string&in filename, const Value@ value)","group":"Json","desc":"Serializes a Json value tree to a file."},{"ns":"Import","name":"GetLibrary","returntypeid":1140850760,"returntypename":"Library","returntypedecl":"Import::Library@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"Library@ GetLibrary(const string&in path)","group":"Import","desc":"Gets a library. If it's already loaded, this will return a handle to the already loaded library."},{"ns":"IO","name":"FromStorageFolder","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"string FromStorageFolder(const string&in filename)","group":"IO","desc":"Gets the absolute path for a file in your plugin's storage folder. This is typically C:\\Users\\Username\\OpenplanetNext\\PluginStorage\\YourPluginIdentifier. When calling this function and the folder doesn't exist yet, it will automatically be created for you."},{"ns":"IO","name":"FromDataFolder","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"string FromDataFolder(const string&in filename)","group":"IO","desc":"Gets the absolute path for a file in the data folder. This is typically C:\\Users\\Username\\OpenplanetNext"},{"ns":"IO","name":"FromAppFolder","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"string FromAppFolder(const string&in filename)","group":"IO","desc":"Gets the absolute path for a file in the game's applicationfolder. This is where your game is installed, for example D:\\Games\\Trackmania"},{"ns":"IO","name":"FromUserGameFolder","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"string FromUserGameFolder(const string&in filename)","group":"IO","desc":"Gets the absolute path for a file in the game's user folder. This what the game considers the user folder, for example C:\\Users\\Username\\Documents\\Trackmania. Note that it is possible for this function to return only the given filename without any absolute path, in case the game doesn't have the necessary info, but you should consider this to happen very rarely (if ever)."},{"ns":"IO","name":"FileExists","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"bool FileExists(const string&in filename)","group":"IO","desc":"Checks if the given path exists."},{"ns":"IO","name":"FileSize","returntypedecl":"uint64","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"uint64 FileSize(const string&in filename)","group":"IO","desc":"Gets the size of the given file."},{"ns":"IO","name":"FileModifiedTime","returntypedecl":"int64","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"int64 FileModifiedTime(const string&in filename)","group":"IO","desc":"Gets the last modified time of the given file."},{"ns":"IO","name":"Delete","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"void Delete(const string&in filename)","group":"IO","desc":"Deletes the given file."},{"ns":"IO","name":"Move","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"target"}],"decl":"void Move(const string&in filename, const string&in target)","group":"IO","desc":"Moves the given file."},{"ns":"IO","name":"FolderExists","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"bool FolderExists(const string&in path)","group":"IO","desc":"Checks if the given path exists."},{"ns":"IO","name":"CreateFolder","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typedecl":"bool","typeflags":0,"name":"recursive","default":"true"}],"decl":"void CreateFolder(const string&in path, bool recursive = true)","group":"IO","desc":"Creates a folder at the given location."},{"ns":"IO","name":"DeleteFolder","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typedecl":"bool","typeflags":0,"name":"recursive","default":"false"}],"decl":"void DeleteFolder(const string&in path, bool recursive = false)","group":"IO","desc":"Deletes the folder at the given location. When `recursive` is false, the directory is only deleted if it is empty. Please be careful when setting recursive to true."},{"ns":"IO","name":"IndexFolder","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typedecl":"bool","typeflags":0,"name":"recursive"}],"decl":"string[]@ IndexFolder(const string&in path, bool recursive)","group":"IO","desc":"Lists files and folders in the current folder. If recursive is true, it will only return files."},{"ns":"IO","name":"SetClipboard","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void SetClipboard(const string&in text)","group":"IO","desc":"Copies text on the clipboard."},{"ns":"Hash","name":"MD5","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The string to hash."}],"decl":"string MD5(const string&in str)","group":"Hash","desc":"Calculate the MD5 hash of the given string."},{"ns":"Hash","name":"Sha1","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The string to hash."}],"decl":"string Sha1(const string&in str)","group":"Hash","desc":"Calculate the SHA1 hash of the given string."},{"ns":"Hash","name":"Sha256","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The string to hash."}],"decl":"string Sha256(const string&in str)","group":"Hash","desc":"Calculate the SHA256 hash of the given string."},{"ns":"Discord","name":"Initialize","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"applicationId"}],"decl":"void Initialize(const string&in applicationId)","group":"Discord","desc":"Initialize the Discord RPC API."},{"ns":"Discord","name":"Shutdown","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Shutdown()","group":"Discord","desc":"Shutdown the Discord RPC API."},{"ns":"Discord","name":"IsReady","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsReady()","group":"Discord","desc":"Check if the Discord RPC API is ready."},{"ns":"Discord","name":"GetUser","returntypeid":1140850772,"returntypename":"User","returntypedecl":"Discord::User@","returntypeflags":0,"args":[],"decl":"User@ GetUser()","group":"Discord","desc":"Gets the currently logged in Discord user."},{"ns":"Discord","name":"SetStatus","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108947,"typename":"Status","typedecl":"Discord::Status","typeflags":5,"name":"status"}],"decl":"void SetStatus(const Status&in status)","group":"Discord","desc":"Sets the current Discord rich presence status."},{"ns":"Discord","name":"Respond","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"userId"},{"typeid":82,"typename":"Response","typedecl":"Discord::Response","typeflags":0,"name":"reply"}],"decl":"void Respond(const string&in userId, Response reply)","group":"Discord","desc":"Respond to a join request."},{"ns":"Discord","name":"GetQueuedJoin","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetQueuedJoin()","group":"Discord","desc":"Get the queued up join secret to join."},{"ns":"Discord","name":"GetQueuedSpectate","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetQueuedSpectate()","group":"Discord","desc":"Get the queued up spectate secret to join."},{"ns":"Discord","name":"GetNumJoinRequests","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetNumJoinRequests()","group":"Discord","desc":"Get the amount of queued up join requests received."},{"ns":"Discord","name":"GetQueuedJoinRequest","returntypeid":1140850772,"returntypename":"User","returntypedecl":"Discord::User@","returntypeflags":0,"args":[],"decl":"User@ GetQueuedJoinRequest()","group":"Discord","desc":"Gets the first queued up join request. Returns null if there's no more join requests."},{"ns":"nvg","name":"LoadTexture","returntypeid":1140850773,"returntypename":"Texture","returntypedecl":"nvg::Texture@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the texture to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user textures folder, or Openplanet's own textures folder."},{"typedecl":"int","typeflags":0,"name":"flags","default":"0"}],"decl":"Texture@ LoadTexture(const string&in filename, int flags = 0)","group":"NanoVG","desc":"Load a texture for the NanoVG API."},{"ns":"nvg","name":"LoadTexture","returntypeid":1140850773,"returntypename":"Texture","returntypedecl":"nvg::Texture@","returntypeflags":0,"args":[{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":"buffer","desc":"The buffer to load the texture from. This must contain the raw bytes of an encoded image."},{"typedecl":"int","typeflags":0,"name":"flags","default":"0"}],"decl":"Texture@ LoadTexture(MemoryBuffer&in buffer, int flags = 0)","group":"NanoVG","desc":"Load a texture for the NanoVG API from a memory buffer."},{"ns":"nvg","name":"LoadFont","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the font to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user fonts folder, or Openplanet's own fonts folder."},{"typedecl":"bool","typeflags":0,"name":"fallbackIcons","default":"false","desc":"Whether to load icon fonts as a fallback. **Warning**: Don't use fallback fonts if you don't need them! Fallback fonts cost a lot of memory!"},{"typedecl":"bool","typeflags":0,"name":"fallbackArial","default":"false","desc":"Whether to load Arial as part of the fallback. This allows for many more Unicode characters to render. For this to work, `fallback` must be true."}],"decl":"int LoadFont(const string&in filename, bool fallbackIcons = false, bool fallbackArial = false)","group":"NanoVG","desc":"Load a font for use in the NanoVG API."},{"ns":"nvg","name":"Save","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Save()","group":"NanoVG","desc":""},{"ns":"nvg","name":"Restore","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Restore()","group":"NanoVG","desc":""},{"ns":"nvg","name":"Reset","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Reset()","group":"NanoVG","desc":""},{"ns":"nvg","name":"ShapeAntiAlias","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"enabled"}],"decl":"void ShapeAntiAlias(bool enabled)","group":"NanoVG","desc":""},{"ns":"nvg","name":"StrokeColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"}],"decl":"void StrokeColor(const vec4&in color)","group":"NanoVG","desc":""},{"ns":"nvg","name":"StrokePaint","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108951,"typename":"Paint","typedecl":"nvg::Paint","typeflags":5,"name":"paint"}],"decl":"void StrokePaint(const Paint&in paint)","group":"NanoVG","desc":""},{"ns":"nvg","name":"FillColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"}],"decl":"void FillColor(const vec4&in color)","group":"NanoVG","desc":""},{"ns":"nvg","name":"FillPaint","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108951,"typename":"Paint","typedecl":"nvg::Paint","typeflags":5,"name":"paint"}],"decl":"void FillPaint(const Paint&in paint)","group":"NanoVG","desc":""},{"ns":"nvg","name":"MiterLimit","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"limit"}],"decl":"void MiterLimit(float limit)","group":"NanoVG","desc":""},{"ns":"nvg","name":"StrokeWidth","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"size"}],"decl":"void StrokeWidth(float size)","group":"NanoVG","desc":""},{"ns":"nvg","name":"LineCap","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":88,"typename":"LineCapType","typedecl":"nvg::LineCapType","typeflags":0,"name":"cap"}],"decl":"void LineCap(LineCapType cap)","group":"NanoVG","desc":""},{"ns":"nvg","name":"LineJoin","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":88,"typename":"LineCapType","typedecl":"nvg::LineCapType","typeflags":0,"name":"join"}],"decl":"void LineJoin(LineCapType join)","group":"NanoVG","desc":""},{"ns":"nvg","name":"GlobalAlpha","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"alpha"}],"decl":"void GlobalAlpha(float alpha)","group":"NanoVG","desc":""},{"ns":"nvg","name":"ResetTransform","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ResetTransform()","group":"NanoVG","desc":""},{"ns":"nvg","name":"SetTransform","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108900,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":"t"}],"decl":"void SetTransform(const mat3&in t)","group":"NanoVG","desc":""},{"ns":"nvg","name":"CurrentTransform","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[],"decl":"mat3 CurrentTransform()","group":"NanoVG","desc":""},{"ns":"nvg","name":"Transform","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108900,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":"t"}],"decl":"void Transform(const mat3&in t)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Translate","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void Translate(float x, float y)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Translate","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"void Translate(const vec2&in)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Rotate","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"void Rotate(float angle)","group":"NanoVG","desc":""},{"ns":"nvg","name":"SkewX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"void SkewX(float angle)","group":"NanoVG","desc":""},{"ns":"nvg","name":"SkewY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"void SkewY(float angle)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Scale","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void Scale(float x, float y)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Scale","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"void Scale(const vec2&in)","group":"NanoVG","desc":""},{"ns":"nvg","name":"LinearGradient","returntypeid":67108951,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"start"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"end"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color1"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color2"}],"decl":"Paint LinearGradient(const vec2&in start, const vec2&in end, const vec4&in color1, const vec4&in color2)","group":"NanoVG","desc":""},{"ns":"nvg","name":"BoxGradient","returntypeid":67108951,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"},{"typedecl":"float","typeflags":0,"name":"r"},{"typedecl":"float","typeflags":0,"name":"f"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color1"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color2"}],"decl":"Paint BoxGradient(float x, float y, float w, float h, float r, float f, const vec4&in color1, const vec4&in color2)","group":"NanoVG","desc":""},{"ns":"nvg","name":"BoxGradient","returntypeid":67108951,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"r"},{"typedecl":"float","typeflags":0,"name":"f"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color1"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color2"}],"decl":"Paint BoxGradient(const vec2&in pos, const vec2&in size, float r, float f, const vec4&in color1, const vec4&in color2)","group":"NanoVG","desc":""},{"ns":"nvg","name":"RadialGradient","returntypeid":67108951,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"center"},{"typedecl":"float","typeflags":0,"name":"inr"},{"typedecl":"float","typeflags":0,"name":"outr"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color1"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color2"}],"decl":"Paint RadialGradient(const vec2&in center, float inr, float outr, const vec4&in color1, const vec4&in color2)","group":"NanoVG","desc":""},{"ns":"nvg","name":"TexturePattern","returntypeid":67108951,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"origin"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"angle"},{"typeid":1140850773,"typename":"Texture","typedecl":"nvg::Texture@","typeflags":0,"name":"texture"},{"typedecl":"float","typeflags":0,"name":"alpha"}],"decl":"Paint TexturePattern(const vec2&in origin, const vec2&in size, float angle, Texture@ texture, float alpha)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Scissor","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"}],"decl":"void Scissor(float x, float y, float w, float h)","group":"NanoVG","desc":""},{"ns":"nvg","name":"IntersectScissor","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"}],"decl":"void IntersectScissor(float x, float y, float w, float h)","group":"NanoVG","desc":""},{"ns":"nvg","name":"ResetScissor","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ResetScissor()","group":"NanoVG","desc":""},{"ns":"nvg","name":"AddFallbackFont","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"baseFont"},{"typedecl":"int","typeflags":0,"name":"fallbackFont"}],"decl":"void AddFallbackFont(int baseFont, int fallbackFont)","group":"NanoVG","desc":""},{"ns":"nvg","name":"FontFace","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"font"}],"decl":"void FontFace(int font)","group":"NanoVG","desc":""},{"ns":"nvg","name":"FontSize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"size"}],"decl":"void FontSize(float size)","group":"NanoVG","desc":""},{"ns":"nvg","name":"FontBlur","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"blur"}],"decl":"void FontBlur(float blur)","group":"NanoVG","desc":""},{"ns":"nvg","name":"TextLetterSpacing","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"spacing"}],"decl":"void TextLetterSpacing(float spacing)","group":"NanoVG","desc":""},{"ns":"nvg","name":"TextLineHeight","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"lineHeight"}],"decl":"void TextLineHeight(float lineHeight)","group":"NanoVG","desc":""},{"ns":"nvg","name":"TextAlign","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"align"}],"decl":"void TextAlign(int align)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Text","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x","desc":"The X position of the text."},{"typedecl":"float","typeflags":0,"name":"y","desc":"The Y position of the text."},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The text to draw."}],"decl":"float Text(float x, float y, const string&in str)","group":"NanoVG","desc":"Draws text using the current font settings."},{"ns":"nvg","name":"Text","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos","desc":"The position of the text."},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The text to draw."}],"decl":"float Text(const vec2&in pos, const string&in str)","group":"NanoVG","desc":"Draws text using the current font settings."},{"ns":"nvg","name":"TextBox","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x","desc":"The X position of the box."},{"typedecl":"float","typeflags":0,"name":"y","desc":"The Y position of the box."},{"typedecl":"float","typeflags":0,"name":"w","desc":"The width of the box. Word wrapping will be applied at this width."},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The text to draw."}],"decl":"void TextBox(float x, float y, float w, const string&in str)","group":"NanoVG","desc":"Draws text inside of a word wrapping box using the current font settings."},{"ns":"nvg","name":"TextBox","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos","desc":"The position of the box."},{"typedecl":"float","typeflags":0,"name":"w","desc":"The width of the box. Word wrapping will be applied at this width."},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The text to draw."}],"decl":"void TextBox(const vec2&in pos, float w, const string&in str)","group":"NanoVG","desc":"Draws text inside of a word wrapping box using the current font settings."},{"ns":"nvg","name":"TextBounds","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"vec2 TextBounds(const string&in str)","group":"NanoVG","desc":"Measures the size of the given text using the current font settings."},{"ns":"nvg","name":"TextBoxBounds","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"w"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"vec2 TextBoxBounds(float w, const string&in str)","group":"NanoVG","desc":"Measures the size of the given text inside of a word wrapping box using the current font settings."},{"ns":"nvg","name":"BeginPath","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void BeginPath()","group":"NanoVG","desc":""},{"ns":"nvg","name":"MoveTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void MoveTo(const vec2&in pos)","group":"NanoVG","desc":""},{"ns":"nvg","name":"LineTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void LineTo(const vec2&in pos)","group":"NanoVG","desc":""},{"ns":"nvg","name":"BezierTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"c1"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"c2"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void BezierTo(const vec2&in c1, const vec2&in c2, const vec2&in pos)","group":"NanoVG","desc":""},{"ns":"nvg","name":"QuadTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"c"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void QuadTo(const vec2&in c, const vec2&in pos)","group":"NanoVG","desc":""},{"ns":"nvg","name":"ArcTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos1"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos2"},{"typedecl":"float","typeflags":0,"name":"radius"}],"decl":"void ArcTo(const vec2&in pos1, const vec2&in pos2, float radius)","group":"NanoVG","desc":""},{"ns":"nvg","name":"ClosePath","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ClosePath()","group":"NanoVG","desc":""},{"ns":"nvg","name":"PathWinding","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":89,"typename":"Winding","typedecl":"nvg::Winding","typeflags":0,"name":"dir"}],"decl":"void PathWinding(Winding dir)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Arc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"center"},{"typedecl":"float","typeflags":0,"name":"r"},{"typedecl":"float","typeflags":0,"name":"a0"},{"typedecl":"float","typeflags":0,"name":"a1"},{"typeid":89,"typename":"Winding","typedecl":"nvg::Winding","typeflags":0,"name":"dir"}],"decl":"void Arc(const vec2&in center, float r, float a0, float a1, Winding dir)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Rect","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"}],"decl":"void Rect(float x, float y, float w, float h)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Rect","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"}],"decl":"void Rect(const vec2&in pos, const vec2&in size)","group":"NanoVG","desc":""},{"ns":"nvg","name":"RoundedRect","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"},{"typedecl":"float","typeflags":0,"name":"r"}],"decl":"void RoundedRect(float x, float y, float w, float h, float r)","group":"NanoVG","desc":""},{"ns":"nvg","name":"RoundedRect","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"r"}],"decl":"void RoundedRect(const vec2&in pos, const vec2&in size, float r)","group":"NanoVG","desc":""},{"ns":"nvg","name":"RoundedRectVarying","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"},{"typedecl":"float","typeflags":0,"name":"rtl"},{"typedecl":"float","typeflags":0,"name":"rtr"},{"typedecl":"float","typeflags":0,"name":"rbr"},{"typedecl":"float","typeflags":0,"name":"rbl"}],"decl":"void RoundedRectVarying(float x, float y, float w, float h, float rtl, float rtr, float rbr, float rbl)","group":"NanoVG","desc":""},{"ns":"nvg","name":"RoundedRectVarying","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"rtl"},{"typedecl":"float","typeflags":0,"name":"rtr"},{"typedecl":"float","typeflags":0,"name":"rbr"},{"typedecl":"float","typeflags":0,"name":"rbl"}],"decl":"void RoundedRectVarying(const vec2&in pos, const vec2&in size, float rtl, float rtr, float rbr, float rbl)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Ellipse","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"center"},{"typedecl":"float","typeflags":0,"name":"rx"},{"typedecl":"float","typeflags":0,"name":"ry"}],"decl":"void Ellipse(const vec2&in center, float rx, float ry)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Circle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"center"},{"typedecl":"float","typeflags":0,"name":"r"}],"decl":"void Circle(const vec2&in center, float r)","group":"NanoVG","desc":""},{"ns":"nvg","name":"Fill","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Fill()","group":"NanoVG","desc":""},{"ns":"nvg","name":"Stroke","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Stroke()","group":"NanoVG","desc":""},{"ns":"UI","name":"LoadTexture","returntypeid":1140850779,"returntypename":"Texture","returntypedecl":"UI::Texture@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the texture to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user textures folder, or Openplanet's own textures folder."}],"decl":"Texture@ LoadTexture(const string&in filename)","group":"UI","desc":"Load a texture for the UI API."},{"ns":"UI","name":"LoadTexture","returntypeid":1140850779,"returntypename":"Texture","returntypedecl":"UI::Texture@","returntypeflags":0,"args":[{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":"buffer","desc":"The buffer to load the texture from. This must contain the raw bytes of an encoded image."}],"decl":"Texture@ LoadTexture(MemoryBuffer&in buffer)","group":"UI","desc":"Load a texture for the UI API from a memory buffer."},{"ns":"UI","name":"LoadFont","returntypeid":1140850780,"returntypename":"Font","returntypedecl":"UI::Font@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the font to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user fonts folder, or Openplanet's own fonts folder."},{"typedecl":"float","typeflags":0,"name":"size","default":"16.0f","desc":"The size of the font in pixels."},{"typedecl":"int","typeflags":0,"name":"minChars","default":"- 1","desc":"The first character to add to the font. Use -1 to start from 0x20."},{"typedecl":"int","typeflags":0,"name":"maxChars","default":"- 1","desc":"The last character to add to the font. Use -1 to end at 0xFF."},{"typedecl":"bool","typeflags":0,"name":"fallback","default":"false","desc":"Whether to load icon fonts as a fallback. **Warning**: Don't use fallback fonts if you don't need them! Fallback fonts cost a lot of memory!"},{"typedecl":"bool","typeflags":0,"name":"fallbackExtendedIcons","default":"false","desc":"Whether to load extended icons (emojis & symbols) as part of the fallback. For this to work, `fallback` must be true."},{"typedecl":"bool","typeflags":0,"name":"fallbackArial","default":"false","desc":"Whether to load Arial as part of the fallback. This allows for many more Unicode characters to render. For this to work, `fallback` must be true."}],"decl":"Font@ LoadFont(const string&in filename, float size = 16.0f, int minChars = - 1, int maxChars = - 1, bool fallback = false, bool fallbackExtendedIcons = false, bool fallbackArial = false)","group":"UI","desc":"Loads a font for use in the UI API. Note that fonts can take up a lot of memory, so be careful in how many characters you request here! The defaults are usually enough."},{"ns":"UI","name":"Begin","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"title"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: WindowFlags :: NoCollapse"}],"decl":"bool Begin(const string&in title, int flags = UI :: WindowFlags :: NoCollapse)","group":"UI","desc":"Begins an imgui window."},{"ns":"UI","name":"Begin","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"title"},{"typedecl":"bool","typeflags":2,"name":"open"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: WindowFlags :: NoCollapse"}],"decl":"bool Begin(const string&in title, bool&out open, int flags = UI :: WindowFlags :: NoCollapse)","group":"UI","desc":"Begins an imgui window."},{"ns":"UI","name":"End","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void End()","group":"UI","desc":"Ends an imgui window. Must always be called even if Begin returns false!"},{"ns":"UI","name":"BeginGroup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void BeginGroup()","group":"UI","desc":"Begins a new group."},{"ns":"UI","name":"EndGroup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndGroup()","group":"UI","desc":"Ends a group."},{"ns":"UI","name":"BeginFormattingGroup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void BeginFormattingGroup()","group":"UI","desc":"Begins the formatting group for $-style formatting. This means that 2 consecutive widgets will share the color stack (and the default text color) of the first widget."},{"ns":"UI","name":"EndFormattingGroup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndFormattingGroup()","group":"UI","desc":"Ends the formatting group."},{"ns":"UI","name":"BeginDisabled","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"disabled","default":"true"}],"decl":"void BeginDisabled(bool disabled = true)","group":"UI","desc":"Begins a group of disabled widgets."},{"ns":"UI","name":"EndDisabled","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndDisabled()","group":"UI","desc":"Ends a group of disabled widgets."},{"ns":"UI","name":"PushStyleColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":98,"typename":"Col","typedecl":"UI::Col","typeflags":0,"name":"idx"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"col"}],"decl":"void PushStyleColor(Col idx, const vec4&in col)","group":"UI","desc":"Temporarily pushes a color change for the next widgets. You must call PopStyleColor() sometime after!"},{"ns":"UI","name":"PopStyleColor","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"count","default":"1"}],"decl":"void PopStyleColor(int count = 1)","group":"UI","desc":"Pops one or more temporary color changes."},{"ns":"UI","name":"GetStyleColor","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":98,"typename":"Col","typedecl":"UI::Col","typeflags":0,"name":"idx"}],"decl":"vec4 GetStyleColor(Col idx)","group":"UI","desc":"Gets the current style color."},{"ns":"UI","name":"GetStyleColorName","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":98,"typename":"Col","typedecl":"UI::Col","typeflags":0,"name":"idx"}],"decl":"string GetStyleColorName(Col idx)","group":"UI","desc":"Gets the name of the given style color."},{"ns":"UI","name":"PushStyleVar","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":99,"typename":"StyleVar","typedecl":"UI::StyleVar","typeflags":0,"name":"var"},{"typedecl":"float","typeflags":0,"name":"value"}],"decl":"void PushStyleVar(StyleVar var, float value)","group":"UI","desc":"Temporarily pushes a style change for the next widgets. You must call PopStyleVar() sometime after!"},{"ns":"UI","name":"PushStyleVar","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":99,"typename":"StyleVar","typedecl":"UI::StyleVar","typeflags":0,"name":"var"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"value"}],"decl":"void PushStyleVar(StyleVar var, const vec2&in value)","group":"UI","desc":"Temporarily pushes a style change for the next widgets. You must call PopStyleVar() sometime after!"},{"ns":"UI","name":"PopStyleVar","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"count","default":"1"}],"decl":"void PopStyleVar(int count = 1)","group":"UI","desc":"Pops one or more temporary style changes."},{"ns":"UI","name":"GetStyleVarFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":99,"typename":"StyleVar","typedecl":"UI::StyleVar","typeflags":0,"name":"var"}],"decl":"float GetStyleVarFloat(StyleVar var)","group":"UI","desc":"Gets the current float value of a style variable."},{"ns":"UI","name":"GetStyleVarVec2","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":99,"typename":"StyleVar","typedecl":"UI::StyleVar","typeflags":0,"name":"var"}],"decl":"vec2 GetStyleVarVec2(StyleVar var)","group":"UI","desc":"Gets the current vector value of a style variable."},{"ns":"UI","name":"GetScrollX","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScrollX()","group":"UI","desc":"Get scrolling amount, from 0 to GetScrollMaxX()."},{"ns":"UI","name":"GetScrollY","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScrollY()","group":"UI","desc":"Get scrolling amount, from 0 to GetScrollMaxY()."},{"ns":"UI","name":"SetScrollX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"void SetScrollX(float x)","group":"UI","desc":"Set scrolling amount, from 0 to GetScrollMaxX()."},{"ns":"UI","name":"SetScrollY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void SetScrollY(float y)","group":"UI","desc":"Set scrolling amount, from 0 to GetScrollMaxY()."},{"ns":"UI","name":"GetScrollMaxX","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScrollMaxX()","group":"UI","desc":"Get maximum horizontal scrolling amount."},{"ns":"UI","name":"GetScrollMaxY","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScrollMaxY()","group":"UI","desc":"Get maximum vertical scrolling amount."},{"ns":"UI","name":"SetScrollHereX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"center_x_ratio","default":"0.5f"}],"decl":"void SetScrollHereX(float center_x_ratio = 0.5f)","group":"UI","desc":"Adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a \"default / current item\" visible, consider using SetItemDefaultFocus() instead."},{"ns":"UI","name":"SetScrollHereY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"center_y_ratio","default":"0.5f"}],"decl":"void SetScrollHereY(float center_y_ratio = 0.5f)","group":"UI","desc":"Adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default / current item\" visible, consider using SetItemDefaultFocus() instead."},{"ns":"UI","name":"SetScrollFromPosX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"local_x"},{"typedecl":"float","typeflags":0,"name":"center_x_ratio","default":"0.5f"}],"decl":"void SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f)","group":"UI","desc":"Adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."},{"ns":"UI","name":"SetScrollFromPosY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"local_y"},{"typedecl":"float","typeflags":0,"name":"center_y_ratio","default":"0.5f"}],"decl":"void SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f)","group":"UI","desc":"Adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position."},{"ns":"UI","name":"SetNextWindowSize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"w"},{"typedecl":"int","typeflags":0,"name":"h"},{"typeid":111,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI :: Cond :: Appearing"}],"decl":"void SetNextWindowSize(int w, int h, Cond cond = UI :: Cond :: Appearing)","group":"UI","desc":"Sets the size for the next window created with UI::Begin()."},{"ns":"UI","name":"SetNextWindowPos","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"},{"typeid":111,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI :: Cond :: Appearing"},{"typedecl":"float","typeflags":0,"name":"pivotx","default":"0.0f"},{"typedecl":"float","typeflags":0,"name":"pivoty","default":"0.0f"}],"decl":"void SetNextWindowPos(int x, int y, Cond cond = UI :: Cond :: Appearing, float pivotx = 0.0f, float pivoty = 0.0f)","group":"UI","desc":"Sets the position for the next window created with UI::Begin(). Pivot floats can be used to align the window on the given point."},{"ns":"UI","name":"SetNextWindowContentSize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"w"},{"typedecl":"int","typeflags":0,"name":"h","default":"0"}],"decl":"void SetNextWindowContentSize(int w, int h = 0)","group":"UI","desc":"Sets the size for the next window contents. Set height to 0 to only set width."},{"ns":"UI","name":"SetNextItemWidth","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"w"}],"decl":"void SetNextItemWidth(float w)","group":"UI","desc":"Sets the width of the next item."},{"ns":"UI","name":"SetNextItemOpen","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"is_open"},{"typeid":111,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI :: Cond :: None"}],"decl":"void SetNextItemOpen(bool is_open, Cond cond = UI :: Cond :: None)","group":"UI","desc":"Sets whether the next item should be open."},{"ns":"UI","name":"PushID","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"void PushID(const ?&in)","group":"UI","desc":"Pushes an ID to the stack."},{"ns":"UI","name":"PushID","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"void PushID(const string&in id)","group":"UI","desc":"Pushes an ID to the stack."},{"ns":"UI","name":"PopID","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopID()","group":"UI","desc":"Pops an ID from the stack."},{"ns":"UI","name":"PushFont","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850780,"typename":"Font","typedecl":"UI::Font@","typeflags":0,"name":"font"}],"decl":"void PushFont(Font@ font)","group":"UI","desc":"Pushes a font to the stack."},{"ns":"UI","name":"PopFont","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopFont()","group":"UI","desc":"Pops a font from the stack."},{"ns":"UI","name":"PushItemWidth","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"item_width"}],"decl":"void PushItemWidth(float item_width)","group":"UI","desc":"Pushes width of items."},{"ns":"UI","name":"PopItemWidth","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopItemWidth()","group":"UI","desc":"Pops width of items."},{"ns":"UI","name":"SameLine","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SameLine()","group":"UI","desc":"Marks the next control to be drawn on the same line as the last one."},{"ns":"UI","name":"NewLine","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void NewLine()","group":"UI","desc":"Marks the next control to be drawn on the next line rather than the current line."},{"ns":"UI","name":"Separator","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Separator()","group":"UI","desc":"Separator line."},{"ns":"UI","name":"Dummy","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"}],"decl":"void Dummy(const vec2&in size)","group":"UI","desc":"Dummy space."},{"ns":"UI","name":"Dummy","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"text_baseline_y"}],"decl":"void Dummy(const vec2&in size, float text_baseline_y)","group":"UI","desc":"Dummy space with a custom baseline."},{"ns":"UI","name":"PushTextWrapPos","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"wrap_local_pos_x","default":"0.0f"}],"decl":"void PushTextWrapPos(float wrap_local_pos_x = 0.0f)","group":"UI","desc":"Push word-wrapping position for Text*() commands. Less than 0: no wrapping; 0: wrap to end of window (or column); > 0: wrap at the given position in window local space."},{"ns":"UI","name":"PopTextWrapPos","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopTextWrapPos()","group":"UI","desc":"Pops word-wrapping position for Text*() commands."},{"ns":"UI","name":"CalcWordWrapPosition","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scale"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"float","typeflags":0,"name":"wrap_width"},{"typedecl":"int","typeflags":0,"name":"text_offset","default":"0"},{"typeid":1140850780,"typename":"Font","typedecl":"UI::Font@","typeflags":0,"name":"font","default":"null"}],"decl":"int CalcWordWrapPosition(float scale, const string&in text, float wrap_width, int text_offset = 0, Font@ font = null)","group":"UI","desc":"Calculates the word wrapping position of the given string."},{"ns":"UI","name":"Button","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2 ( )"}],"decl":"bool Button(const string&in label, const vec2&in size = vec2 ( ))","group":"UI","desc":"Clickable button. Returns true if it was clicked."},{"ns":"UI","name":"InvisibleButton","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: ButtonFlags :: None"}],"decl":"bool InvisibleButton(const string&in id, const vec2&in size, int flags = UI :: ButtonFlags :: None)","group":"UI","desc":"Clickable invisible button. Returns true if it was clicked."},{"ns":"UI","name":"Text","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"int","typeflags":0,"name":"length","default":"- 1"}],"decl":"void Text(const string&in text, int length = - 1)","group":"UI","desc":"Simple text label with an optional length."},{"ns":"UI","name":"TextWrapped","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void TextWrapped(const string&in text)","group":"UI","desc":"Simple text label with word wrapping."},{"ns":"UI","name":"TextWrappedWindow","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"float","typeflags":0,"name":"new_line_padding","default":"0"},{"typedecl":"float","typeflags":0,"name":"extra_wrap_size","default":"0"}],"decl":"void TextWrappedWindow(const string&in text, float new_line_padding = 0, float extra_wrap_size = 0)","group":"UI","desc":"Simple text label with word wrapping, but the text resets to the start of the window instead of the starting cursor position."},{"ns":"UI","name":"TextDisabled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void TextDisabled(const string&in text)","group":"UI","desc":"Simple text label, but in its disabled color."},{"ns":"UI","name":"LabelText","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void LabelText(const string&in label, const string&in text)","group":"UI","desc":"Text label with a value."},{"ns":"UI","name":"PlotLines","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":268438624,"typename":"array","typedecl":"float[]","typeflags":5,"name":"values"},{"typedecl":"int","typeflags":0,"name":"offset","default":"0"},{"typedecl":"float","typeflags":0,"name":"height","default":"0.0f"}],"decl":"void PlotLines(const string&in label, const float[]&in values, int offset = 0, float height = 0.0f)","group":"UI","desc":"Line graph."},{"ns":"UI","name":"PlotHistogram","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":268438624,"typename":"array","typedecl":"float[]","typeflags":5,"name":"values"},{"typedecl":"int","typeflags":0,"name":"offset","default":"0"},{"typedecl":"float","typeflags":0,"name":"height","default":"0.0f"}],"decl":"void PlotHistogram(const string&in label, const float[]&in values, int offset = 0, float height = 0.0f)","group":"UI","desc":"Histogram graph."},{"ns":"UI","name":"Checkbox","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":0,"name":"value"}],"decl":"bool Checkbox(const string&in label, bool value)","group":"UI","desc":"Checkbox. For value, pass the current value. The return value is the new value."},{"ns":"UI","name":"RadioButton","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":0,"name":"active"}],"decl":"bool RadioButton(const string&in label, bool active)","group":"UI","desc":"Radio button. For active, pass whether the current value is active. Returns true if the button was pressed."},{"ns":"UI","name":"BeginMenuBar","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool BeginMenuBar()","group":"UI","desc":"Begins an imgui menu bar."},{"ns":"UI","name":"EndMenuBar","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndMenuBar()","group":"UI","desc":"Ends an imgui menu bar."},{"ns":"UI","name":"BeginMenu","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":0,"name":"enabled","default":"true"}],"decl":"bool BeginMenu(const string&in label, bool enabled = true)","group":"UI","desc":"Begins an imgui menu."},{"ns":"UI","name":"EndMenu","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndMenu()","group":"UI","desc":"Ends an imgui menu."},{"ns":"UI","name":"MenuItem","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"shortcut","default":"\"\""},{"typedecl":"bool","typeflags":0,"name":"selected","default":"false"},{"typedecl":"bool","typeflags":0,"name":"enabled","default":"true"}],"decl":"bool MenuItem(const string&in label, const string&in shortcut = \"\", bool selected = false, bool enabled = true)","group":"UI","desc":"Clickable menu item. Returns true when clicked."},{"ns":"UI","name":"IsWindowAppearing","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsWindowAppearing()","group":"UI","desc":"Returns true if the previous window is just now appearing."},{"ns":"UI","name":"TreeNode","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: TreeNodeFlags :: None"}],"decl":"bool TreeNode(const string&in text, int flags = UI :: TreeNodeFlags :: None)","group":"UI","desc":"Node in a tree list. Returns true if opened."},{"ns":"UI","name":"TreePop","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void TreePop()","group":"UI","desc":"End of the previously tree node. Must only be called if TreeNode() returned true."},{"ns":"UI","name":"TreeAdvanceToLabelPos","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void TreeAdvanceToLabelPos()","group":"UI","desc":"Advance the cursor position to the normal label position for tree nodes."},{"ns":"UI","name":"CollapsingHeader","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"}],"decl":"bool CollapsingHeader(const string&in label)","group":"UI","desc":"Collapsable header. Returns true if open."},{"ns":"UI","name":"Columns","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"count"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id","default":"\"\""},{"typedecl":"bool","typeflags":0,"name":"border","default":"true"}],"decl":"void Columns(int count, const string&in id = \"\", bool border = true)","group":"UI","desc":"Begins a table layout. Call this with count set to 1 to reset to normal."},{"ns":"UI","name":"NextColumn","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void NextColumn()","group":"UI","desc":"Goes to the next column."},{"ns":"UI","name":"IsItemHovered","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: HoveredFlags :: None"}],"decl":"bool IsItemHovered(int flags = UI :: HoveredFlags :: None)","group":"UI","desc":"Returns true if the mouse is hovering the previous control."},{"ns":"UI","name":"IsItemActive","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsItemActive()","group":"UI","desc":"Returns true if the previous control is active."},{"ns":"UI","name":"IsItemFocused","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsItemFocused()","group":"UI","desc":"Returns true if the previous control is focused."},{"ns":"UI","name":"IsItemClicked","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsItemClicked()","group":"UI","desc":"Returns true if the previous control is clicked."},{"ns":"UI","name":"IsItemDeactivated","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsItemDeactivated()","group":"UI","desc":"Returns true if the previous control is deactivated."},{"ns":"UI","name":"GetItemRect","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[],"decl":"vec4 GetItemRect()","group":"UI","desc":"Returns the rectangle of the previous control in screen space."},{"ns":"UI","name":"CalcItemSize","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"}],"decl":"vec2 CalcItemSize(const vec2&in size, float w, float h)","group":"UI","desc":"Calculate full item size given user provided 'size' parameter and default width/height. Default width is often == CalcItemWidth()."},{"ns":"UI","name":"IsKeyPressed","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":112,"typename":"Key","typedecl":"UI::Key","typeflags":0,"name":"key"}],"decl":"bool IsKeyPressed(Key key)","group":"UI","desc":"Returns true if the given key was pressed."},{"ns":"UI","name":"BeginTooltip","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void BeginTooltip()","group":"UI","desc":"Begins a tooltip dialog."},{"ns":"UI","name":"EndTooltip","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndTooltip()","group":"UI","desc":"Ends a tooltip dialog."},{"ns":"UI","name":"OpenPopup","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"void OpenPopup(const string&in id)","group":"UI","desc":"Opens a popup with the given ID. Must be within the same scope of ID's."},{"ns":"UI","name":"CloseCurrentPopup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void CloseCurrentPopup()","group":"UI","desc":"Closes the current popup."},{"ns":"UI","name":"BeginPopup","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: WindowFlags :: None"}],"decl":"bool BeginPopup(const string&in id, int flags = UI :: WindowFlags :: None)","group":"UI","desc":"Begins a popup."},{"ns":"UI","name":"BeginPopupContextItem","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"bool BeginPopupContextItem(const string&in id)","group":"UI","desc":"Begins a popup context item."},{"ns":"UI","name":"BeginPopupModal","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: WindowFlags :: None"}],"decl":"bool BeginPopupModal(const string&in id, int flags = UI :: WindowFlags :: None)","group":"UI","desc":"Begins a modal popup."},{"ns":"UI","name":"BeginPopupModal","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"bool","typeflags":2,"name":"open"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: WindowFlags :: None"}],"decl":"bool BeginPopupModal(const string&in id, bool&out open, int flags = UI :: WindowFlags :: None)","group":"UI","desc":"Begins a modal popup."},{"ns":"UI","name":"EndPopup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndPopup()","group":"UI","desc":"Ends a popup."},{"ns":"UI","name":"BeginCombo","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"current"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: ComboFlags :: None"}],"decl":"bool BeginCombo(const string&in label, const string&in current, int flags = UI :: ComboFlags :: None)","group":"UI","desc":"Begins a combo box."},{"ns":"UI","name":"Selectable","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":0,"name":"selected"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: SelectableFlags :: None"}],"decl":"bool Selectable(const string&in label, bool selected, int flags = UI :: SelectableFlags :: None)","group":"UI","desc":"Represents a selectable item. Could be inside of a combo box."},{"ns":"UI","name":"SetItemDefaultFocus","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SetItemDefaultFocus()","group":"UI","desc":"Puts default focus on the last added item."},{"ns":"UI","name":"EndCombo","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndCombo()","group":"UI","desc":"Ends a combo box."},{"ns":"UI","name":"InputText","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: InputTextFlags :: None"},{"typeid":1140850803,"typename":"InputTextCallback","typedecl":"UI::InputTextCallback@","typeflags":0,"name":"callback","default":"null"}],"decl":"string InputText(const string&in label, string str, int flags = UI :: InputTextFlags :: None, InputTextCallback@ callback = null)","group":"UI","desc":"Input text. Returns the new value."},{"ns":"UI","name":"InputText","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typedecl":"bool","typeflags":2,"name":"changed"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: InputTextFlags :: None"},{"typeid":1140850803,"typename":"InputTextCallback","typedecl":"UI::InputTextCallback@","typeflags":0,"name":"callback","default":"null"}],"decl":"string InputText(const string&in label, string str, bool&out changed, int flags = UI :: InputTextFlags :: None, InputTextCallback@ callback = null)","group":"UI","desc":"Input text. Returns the new value as well as the changed boolean."},{"ns":"UI","name":"InputTextMultiline","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2 ( 0 , 0 )"},{"typeid":104,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"flags","default":"UI :: InputTextFlags :: None"},{"typeid":1140850803,"typename":"InputTextCallback","typedecl":"UI::InputTextCallback@","typeflags":0,"name":"callback","default":"null"}],"decl":"string InputTextMultiline(const string&in label, string str, const vec2&in size = vec2 ( 0 , 0 ), InputTextFlags flags = UI :: InputTextFlags :: None, InputTextCallback@ callback = null)","group":"UI","desc":"Input text in a multiline box. Returns the new value."},{"ns":"UI","name":"InputTextMultiline","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typedecl":"bool","typeflags":2,"name":"changed"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2 ( 0 , 0 )"},{"typeid":104,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"flags","default":"UI :: InputTextFlags :: None"},{"typeid":1140850803,"typename":"InputTextCallback","typedecl":"UI::InputTextCallback@","typeflags":0,"name":"callback","default":"null"}],"decl":"string InputTextMultiline(const string&in label, string str, bool&out changed, const vec2&in size = vec2 ( 0 , 0 ), InputTextFlags flags = UI :: InputTextFlags :: None, InputTextCallback@ callback = null)","group":"UI","desc":"Input text in a multiline box. Returns the new value as well as the changed boolean."},{"ns":"UI","name":"SetKeyboardFocusHere","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"void SetKeyboardFocusHere(int offset = 0)","group":"UI","desc":"Sets the keyboard focus on the next widget. Use positive offsets to access sub components of a multiple component widget. Use -1 to access previous widget."},{"ns":"UI","name":"InputInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"int","typeflags":0,"name":"num"},{"typedecl":"int","typeflags":0,"name":"step","default":"1"}],"decl":"int InputInt(const string&in label, int num, int step = 1)","group":"UI","desc":"Input integer. Returns the new value."},{"ns":"UI","name":"InputFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"float","typeflags":0,"name":"num"},{"typedecl":"float","typeflags":0,"name":"step","default":"1.0f"}],"decl":"float InputFloat(const string&in label, float num, float step = 1.0f)","group":"UI","desc":"Input float. Returns the new value."},{"ns":"UI","name":"InputFloat2","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":0,"name":"v"}],"decl":"vec2 InputFloat2(const string&in label, vec2 v)","group":"UI","desc":"Input vec2. Returns the new value."},{"ns":"UI","name":"InputFloat3","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":0,"name":"v"}],"decl":"vec3 InputFloat3(const string&in label, vec3 v)","group":"UI","desc":"Input vec3. Returns the new value."},{"ns":"UI","name":"InputFloat4","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":0,"name":"v"}],"decl":"vec4 InputFloat4(const string&in label, vec4 v)","group":"UI","desc":"Input vec4. Returns the new value."},{"ns":"UI","name":"SliderInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"int","typeflags":0,"name":"num"},{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%d\""}],"decl":"int SliderInt(const string&in label, int num, int min, int max, const string&in format = \"%d\")","group":"UI","desc":"Slider for integers. Returns the new value."},{"ns":"UI","name":"SliderFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"float","typeflags":0,"name":"num"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""}],"decl":"float SliderFloat(const string&in label, float num, float min, float max, const string&in format = \"%.3f\")","group":"UI","desc":"Slider for floats. Returns the new value."},{"ns":"UI","name":"SliderFloat2","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":0,"name":"v"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""}],"decl":"vec2 SliderFloat2(const string&in label, vec2 v, float min, float max, const string&in format = \"%.3f\")","group":"UI","desc":"Slider for vec2. Returns the new value."},{"ns":"UI","name":"SliderFloat3","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":0,"name":"v"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""}],"decl":"vec3 SliderFloat3(const string&in label, vec3 v, float min, float max, const string&in format = \"%.3f\")","group":"UI","desc":"Slider for vec3. Returns the new value."},{"ns":"UI","name":"SliderFloat4","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":0,"name":"v"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""}],"decl":"vec4 SliderFloat4(const string&in label, vec4 v, float min, float max, const string&in format = \"%.3f\")","group":"UI","desc":"Slider for vec4. Returns the new value."},{"ns":"UI","name":"SliderDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"double","typeflags":0,"name":"num"},{"typedecl":"double","typeflags":0,"name":"min"},{"typedecl":"double","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""}],"decl":"double SliderDouble(const string&in label, double num, double min, double max, const string&in format = \"%.3f\")","group":"UI","desc":"Slider for doubles. Returns the new value."},{"ns":"UI","name":"VSliderInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"int","typeflags":0,"name":"num"},{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%d\""}],"decl":"int VSliderInt(const string&in label, const vec2&in size, int num, int min, int max, const string&in format = \"%d\")","group":"UI","desc":"Vertical slider for integers. Returns the new value."},{"ns":"UI","name":"VSliderFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"num"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""}],"decl":"float VSliderFloat(const string&in label, const vec2&in size, float num, float min, float max, const string&in format = \"%.3f\")","group":"UI","desc":"Vertical slider for floats. Returns the new value."},{"ns":"UI","name":"VSliderDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"double","typeflags":0,"name":"num"},{"typedecl":"double","typeflags":0,"name":"min"},{"typedecl":"double","typeflags":0,"name":"max"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""}],"decl":"double VSliderDouble(const string&in label, const vec2&in size, double num, double min, double max, const string&in format = \"%.3f\")","group":"UI","desc":"Vertical slider for doubles. Returns the new value."},{"ns":"UI","name":"InputColor3","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":0,"name":"color"}],"decl":"vec3 InputColor3(const string&in label, vec3 color)","group":"UI","desc":"Input color. Returns the new value."},{"ns":"UI","name":"InputColor4","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":0,"name":"color"}],"decl":"vec4 InputColor4(const string&in label, vec4 color)","group":"UI","desc":"Input color. Returns the new value."},{"ns":"UI","name":"Image","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850779,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"}],"decl":"void Image(Texture@ texture)","group":"UI","desc":"An image."},{"ns":"UI","name":"Image","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850779,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"}],"decl":"void Image(Texture@ texture, const vec2&in size)","group":"UI","desc":"An image scaled to a specific size."},{"ns":"UI","name":"BeginChild","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2 ( )"},{"typedecl":"bool","typeflags":0,"name":"border","default":"false"},{"typedecl":"int","typeflags":0,"name":"flags","default":"0"}],"decl":"bool BeginChild(const string&in id, const vec2&in size = vec2 ( ), bool border = false, int flags = 0)","group":"UI","desc":"Begins a self-contained indepedendent scrolling container."},{"ns":"UI","name":"EndChild","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndChild()","group":"UI","desc":"Ends a child container. Must always be called even if BeginChild returns false!"},{"ns":"UI","name":"BeginTabBar","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: TabBarFlags :: None"}],"decl":"void BeginTabBar(const string&in id, int flags = UI :: TabBarFlags :: None)","group":"UI","desc":"Begins a multi-tab container."},{"ns":"UI","name":"BeginTabItem","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: TabItemFlags :: None"}],"decl":"bool BeginTabItem(const string&in label, int flags = UI :: TabItemFlags :: None)","group":"UI","desc":"Begins a tab item within a multi-tab container."},{"ns":"UI","name":"BeginTabItem","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":2,"name":"open"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: TabItemFlags :: None"}],"decl":"bool BeginTabItem(const string&in label, bool&out open, int flags = UI :: TabItemFlags :: None)","group":"UI","desc":"Begins a tab item within a multi-tab container."},{"ns":"UI","name":"EndTabItem","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndTabItem()","group":"UI","desc":"Ends a tab item within a multi-tab container."},{"ns":"UI","name":"EndTabBar","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndTabBar()","group":"UI","desc":"Ends a multi-tab container."},{"ns":"UI","name":"BeginTable","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"int","typeflags":0,"name":"columns"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: TableFlags :: None"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"outer_size","default":"vec2 ( )"},{"typedecl":"float","typeflags":0,"name":"inner_width","default":"0.0f"}],"decl":"bool BeginTable(const string&in id, int columns, int flags = UI :: TableFlags :: None, const vec2&in outer_size = vec2 ( ), float inner_width = 0.0f)","group":"UI","desc":"Begins a table. Only call EndTable() if BeginTable() returns true."},{"ns":"UI","name":"EndTable","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndTable()","group":"UI","desc":"Ends a table."},{"ns":"UI","name":"TableNextRow","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: TableRowFlags :: None"},{"typedecl":"float","typeflags":0,"name":"min_height","default":"0.0f"}],"decl":"void TableNextRow(int flags = UI :: TableRowFlags :: None, float min_height = 0.0f)","group":"UI","desc":"Append into the first cell of a new row in a table."},{"ns":"UI","name":"TableNextColumn","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool TableNextColumn()","group":"UI","desc":"Append into the next column (or first column of new row) of a table. Returns true if visible."},{"ns":"UI","name":"TableSetColumnIndex","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"bool TableSetColumnIndex(int index)","group":"UI","desc":"Append into a specified column of a table. Returns true if visible."},{"ns":"UI","name":"TableSetupColumn","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: TableColumnFlags :: None"},{"typedecl":"float","typeflags":0,"name":"init_width_or_weight","default":"0.0f"},{"typedecl":"uint","typeflags":0,"name":"user_id","default":"0"}],"decl":"void TableSetupColumn(const string&in label, int flags = UI :: TableColumnFlags :: None, float init_width_or_weight = 0.0f, uint user_id = 0)","group":"UI","desc":"Sets up a column within a table with a label, flags, and initial size."},{"ns":"UI","name":"TableSetupScrollFreeze","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"cols"},{"typedecl":"int","typeflags":0,"name":"rows"}],"decl":"void TableSetupScrollFreeze(int cols, int rows)","group":"UI","desc":"Lock columns and rows in a table so they stay visible when scrolled."},{"ns":"UI","name":"TableHeadersRow","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void TableHeadersRow()","group":"UI","desc":"Submit all table header cells based on data provided to TableSetupColumn."},{"ns":"UI","name":"TableHeader","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"label"}],"decl":"void TableHeader(const string&in label)","group":"UI","desc":"Submit one header cell manually. (Prefer TableHeadersRow!)"},{"ns":"UI","name":"TableGetSortSpecs","returntypeid":1140850805,"returntypename":"TableSortSpecs","returntypedecl":"UI::TableSortSpecs@","returntypeflags":0,"args":[],"decl":"TableSortSpecs@ TableGetSortSpecs()","group":"UI","desc":"Get latest sort specs for the table. Returns null when not sorting."},{"ns":"UI","name":"BeginListBox","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2 ( )"}],"decl":"bool BeginListBox(const string&in id, const vec2&in size = vec2 ( ))","group":"UI","desc":"Begins a listbox. This is essentially a thin wrapper to using BeginChild/EndChild with some stylistic changes."},{"ns":"UI","name":"EndListBox","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndListBox()","group":"UI","desc":"Ends a listbox."},{"ns":"UI","name":"AlignTextToFramePadding","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void AlignTextToFramePadding()","group":"UI","desc":"Vertically align upcoming text baseline to frame padding so that it will align properly to regularly framed items (call if you have text on a line before a framed item)."},{"ns":"UI","name":"GetTextLineHeight","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetTextLineHeight()","group":"UI","desc":"Gets the line height of text. Typically the font size."},{"ns":"UI","name":"GetTextLineHeightWithSpacing","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetTextLineHeightWithSpacing()","group":"UI","desc":"Gets the line height of text plus the distance between 2 consecutive lines of text."},{"ns":"UI","name":"GetFrameHeight","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetFrameHeight()","group":"UI","desc":"Gets the frame height."},{"ns":"UI","name":"GetFrameHeightWithSpacing","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetFrameHeightWithSpacing()","group":"UI","desc":"Gets the frame height plus the distance in pixels between 2 consecutive lines of framed widgets."},{"ns":"UI","name":"GetCursorPos","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetCursorPos()","group":"UI","desc":"Gets the current position of the UI cursor."},{"ns":"UI","name":"SetCursorPos","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void SetCursorPos(const vec2&in pos)","group":"UI","desc":"Sets the current position of the UI cursor."},{"ns":"UI","name":"GetWindowPos","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetWindowPos()","group":"UI","desc":"Gets the current position of the UI window."},{"ns":"UI","name":"SetWindowPos","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typeid":111,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI :: Cond :: None"}],"decl":"void SetWindowPos(const vec2&in size, Cond cond = UI :: Cond :: None)","group":"UI","desc":"Sets the current position of the UI window."},{"ns":"UI","name":"GetWindowSize","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetWindowSize()","group":"UI","desc":"Gets the current size of the UI window."},{"ns":"UI","name":"SetWindowSize","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typeid":111,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI :: Cond :: None"}],"decl":"void SetWindowSize(const vec2&in size, Cond cond = UI :: Cond :: None)","group":"UI","desc":"Sets the current size of the UI window."},{"ns":"UI","name":"IsWindowFocused","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"flags","default":"UI :: FocusedFlags :: None"}],"decl":"bool IsWindowFocused(int flags = UI :: FocusedFlags :: None)","group":"UI","desc":"Is the current window focused? Or its root/child, depending on flags."},{"ns":"UI","name":"GetContentRegionAvail","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetContentRegionAvail()","group":"UI","desc":"Gets the currently available size in the window."},{"ns":"UI","name":"GetContentRegionMax","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetContentRegionMax()","group":"UI","desc":"Gets the current content boundaries."},{"ns":"UI","name":"GetWindowContentRegionMin","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetWindowContentRegionMin()","group":"UI","desc":"Gets the content boundaries minimum."},{"ns":"UI","name":"GetWindowContentRegionMax","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetWindowContentRegionMax()","group":"UI","desc":"Gets the content boundaries maximum."},{"ns":"UI","name":"GetWindowContentRegionWidth","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetWindowContentRegionWidth()","group":"UI","desc":"Gets the content width."},{"ns":"UI","name":"NodTree","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"nod"},{"typeid":1140850782,"typename":"NodTreeMemberCallback","typedecl":"UI::NodTreeMemberCallback@","typeflags":0,"name":"memberCallback","default":"null"}],"decl":"void NodTree(CMwNod@ nod, NodTreeMemberCallback@ memberCallback = null)","group":"UI","desc":"A tree of nods, much like Nod Explorer."},{"ns":"UI","name":"IsOverlayShown","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsOverlayShown()","group":"UI","desc":"Returns true if the overlay is currently visible."},{"ns":"UI","name":"ShowOverlay","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ShowOverlay()","group":"UI","desc":"Shows the overlay."},{"ns":"UI","name":"HideOverlay","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void HideOverlay()","group":"UI","desc":"Hides the overlay."},{"ns":"UI","name":"IsGameUIVisible","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsGameUIVisible()","group":"UI","desc":"Returns true if the game UI is currently visible, or false if it was hidden. By default, the button for this is asterisk on the numpad. Note that this also returns true if the player is not currently in game."},{"ns":"UI","name":"IsRendering","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsRendering()","group":"UI","desc":"Returns true if Openplanet's overlay is rendering at all. For example, this can return false if the global option \"Hide overlay on hidden game UI\" is enabled."},{"ns":"UI","name":"CurrentActionMap","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string CurrentActionMap()","group":"UI","desc":"Returns the name of the currently active action map in the game."},{"ns":"UI","name":"IsDockingEnabled","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsDockingEnabled()","group":"UI","desc":"Returns true if docking is enabled in the Openplanet settings."},{"ns":"UI","name":"ShowNotification","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"int","typeflags":0,"name":"time","default":"5000"}],"decl":"void ShowNotification(const string&in text, int time = 5000)","group":"UI","desc":"Shows a notification in the overlay."},{"ns":"UI","name":"ShowNotification","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"header"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"int","typeflags":0,"name":"time","default":"5000"}],"decl":"void ShowNotification(const string&in header, const string&in text, int time = 5000)","group":"UI","desc":"Shows a notification in the overlay with an additional header."},{"ns":"UI","name":"ShowNotification","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"header"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colBackground"},{"typedecl":"int","typeflags":0,"name":"time","default":"5000"}],"decl":"void ShowNotification(const string&in header, const string&in text, const vec4&in colBackground, int time = 5000)","group":"UI","desc":"Shows a notification in the overlay with an additional header and background color."},{"ns":"UI","name":"GetMousePos","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetMousePos()","group":"UI","desc":"Get the current position of the mouse relative to the top-left corner of the window."},{"ns":"UI","name":"HSV","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"h"},{"typedecl":"float","typeflags":0,"name":"s"},{"typedecl":"float","typeflags":0,"name":"v"}],"decl":"vec4 HSV(float h, float s, float v)","group":"UI","desc":"Converts HSV values into RGB values."},{"ns":"UI","name":"Markdown","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void Markdown(const string&in str)","group":"UI","desc":"Renders a block of text with Markdown formatting."},{"ns":"Draw","name":"GetWidth","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetWidth()","group":"Draw","desc":"Gets the width of the game's resolution."},{"ns":"Draw","name":"GetHeight","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetHeight()","group":"Draw","desc":"Gets the height of the game's resolution."},{"ns":"Draw","name":"MeasureString","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typeid":1140850780,"typename":"Font","typedecl":"UI::Font@","typeflags":0,"name":"font","default":"null"},{"typedecl":"float","typeflags":0,"name":"size","default":"0.0f"},{"typedecl":"float","typeflags":0,"name":"wrapWidth","default":"0.0f"}],"decl":"vec2 MeasureString(const string&in str, UI::Font@ font = null, float size = 0.0f, float wrapWidth = 0.0f)","group":"Draw","desc":"Calculates the size that a string will be drawn at."},{"ns":"UI","name":"GetBackgroundDrawList","returntypeid":1140850806,"returntypename":"DrawList","returntypedecl":"UI::DrawList@","returntypeflags":0,"args":[],"decl":"DrawList@ GetBackgroundDrawList()","group":"UI","desc":"Get background draw list. (Note: You might want to prefer using the Nvg API!)"},{"ns":"UI","name":"GetForegroundDrawList","returntypeid":1140850806,"returntypename":"DrawList","returntypedecl":"UI::DrawList@","returntypeflags":0,"args":[],"decl":"DrawList@ GetForegroundDrawList()","group":"UI","desc":"Get foreground draw list."},{"ns":"UI","name":"GetWindowDrawList","returntypeid":1140850806,"returntypename":"DrawList","returntypedecl":"UI::DrawList@","returntypeflags":0,"args":[],"decl":"DrawList@ GetWindowDrawList()","group":"UI","desc":"Get draw list associated to the current UI window. (Do not keep this handle around outside of windows this was called from!)"},{"name":"tostring","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"string tostring(const ?&in)","group":"Core","desc":"Returns a string representation of the given object, if possible. Will call an object's ToString() method if it exists. Throws an exception if it was unable to."},{"name":"trace","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void trace(const string&in)","group":"Core","desc":"Prints a trace to Openplanet's log."},{"name":"print","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void print(const string&in)","group":"Core","desc":"Prints a line to Openplanet's log."},{"name":"warn","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void warn(const string&in)","group":"Core","desc":"Prints a warning to Openplanet's log."},{"name":"error","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void error(const string&in)","group":"Core","desc":"Prints an error to Openplanet's log."},{"name":"trace","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":""}],"decl":"void trace(?&in)","group":"Core","desc":"Prints a trace to Openplanet's log. Will call a passed object's ToString() method if it exists."},{"name":"print","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":""}],"decl":"void print(?&in)","group":"Core","desc":"Prints a line to Openplanet's log. Will call a passed object's ToString() method if it exists."},{"name":"warn","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":""}],"decl":"void warn(?&in)","group":"Core","desc":"Prints a warning to Openplanet's log. Will call a passed object's ToString() method if it exists."},{"name":"error","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":""}],"decl":"void error(?&in)","group":"Core","desc":"Prints an error to Openplanet's log. Will call a passed object's ToString() method if it exists."},{"name":"throw","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void throw(const string&in)","group":"Core","desc":"Throws a script exception."},{"name":"getExceptionInfo","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string getExceptionInfo()","group":"Core","desc":"Returns the exception string."},{"name":"sleep","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ms"}],"decl":"void sleep(uint64 ms)","group":"Core","desc":"Yields the current execution for a given period of time. Execution will be resumed after that time."},{"name":"yield","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void yield()","group":"Core","desc":"Yields the current execution. Execution will be resumed the next game tick."},{"name":"await","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850744,"typename":"PluginCoroutine","typedecl":"Meta::PluginCoroutine@","typeflags":0,"name":"routine"}],"decl":"void await(Meta::PluginCoroutine@ routine)","group":"Core","desc":"Yields the current execution until the given coroutine has finished."},{"name":"await","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1342180449,"typename":"array","typedecl":"Meta::PluginCoroutine@[]@","typeflags":0,"name":"routines"}],"decl":"void await(Meta::PluginCoroutine@[]@ routines)","group":"Core","desc":"Yields the current execution until all the given coroutines have finished."},{"name":"awaitany","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1342180449,"typename":"array","typedecl":"Meta::PluginCoroutine@[]@","typeflags":0,"name":"routines"}],"decl":"void awaitany(Meta::PluginCoroutine@[]@ routines)","group":"Core","desc":"Yields the current execution until at least 1 of the given coroutines have finished."},{"name":"startnew","returntypeid":1140850744,"returntypename":"PluginCoroutine","returntypedecl":"Meta::PluginCoroutine@","returntypeflags":0,"args":[{"typeid":1140853851,"typename":"CoroutineFunc","typedecl":"CoroutineFunc@","typeflags":0,"name":"func"}],"decl":"Meta::PluginCoroutine@ startnew(CoroutineFunc@ func)","group":"Core","desc":"Starts a new yieldable coroutine from the given function. Function should be a declaration of 'void Func()'."},{"name":"startnew","returntypeid":1140850744,"returntypename":"PluginCoroutine","returntypedecl":"Meta::PluginCoroutine@","returntypeflags":0,"args":[{"typeid":1140853852,"typename":"CoroutineFuncUserdata","typedecl":"CoroutineFuncUserdata@","typeflags":0,"name":"func"},{"typeid":67108890,"typename":"ref","typedecl":"ref","typeflags":0,"name":"userdata"}],"decl":"Meta::PluginCoroutine@ startnew(CoroutineFuncUserdata@ func, ref userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata handle parameter. Function should be a declaration of 'void Func(ref@)'."},{"name":"StripFormatCodes","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"s"}],"decl":"string StripFormatCodes(const string&in s)","group":"Core","desc":"Strips all formatting codes from a string."},{"name":"StripNonColorFormatCodes","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"s"}],"decl":"string StripNonColorFormatCodes(const string&in s)","group":"Core","desc":"Strips all non-color formatting codes from a string."},{"name":"ColoredString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"s"}],"decl":"string ColoredString(const string&in s)","group":"Core","desc":"Takes a string, converts Maniaplanet-style formatting color codes and turns them into Openplanet UI color codes. This will also get rid of all unsupported non-color formatting codes."},{"name":"ExploreNod","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void ExploreNod(const string&in name, const ?&in)","group":"Core","desc":"Opens the Nod Explorer with the given nod and the given tab name."},{"name":"ExploreNod","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"?","typeflags":5,"name":""},{"typeid":1677721648,"typename":"MwClassInfo","typedecl":"const Reflection::MwClassInfo@","typeflags":0,"name":"classInfo"}],"decl":"void ExploreNod(const string&in name, const ?&in, const Reflection::MwClassInfo@ classInfo)","group":"Core","desc":"Opens the Nod Explorer with the given nod, the given tab name, and the given class info. Only use this for exploring structs."},{"name":"ExploreNod","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"void ExploreNod(const ?&in)","group":"Core","desc":"Opens the Nod Explorer with the given nod."},{"name":"OpenplanetHasFullPermissions","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenplanetHasFullPermissions()","group":"Core","desc":"Returns true if Openplanet has full permissions. (On Trackmania, this means having the Club Edition of the game.)"},{"name":"OpenplanetHasPaidPermissions","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenplanetHasPaidPermissions()","group":"Core","desc":"Returns true if Openplanet has (at least) paid permissions. (On Trackmania, this means having the Standard or Club Edition of the game.)"},{"name":"GetApp","returntypeid":1140851204,"returntypename":"CGameCtnApp","returntypedecl":"CGameCtnApp@","returntypeflags":0,"args":[],"decl":"CGameCtnApp@ GetApp()","group":"Core","desc":"Gets the main game app object."},{"name":"GetFidFromNod","returntypeid":1140852458,"returntypename":"CSystemFid","returntypedecl":"CSystemFid@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"CSystemFid@ GetFidFromNod(const ?&in)","group":"Core","desc":"Gets the fid of the given nod, if it's set."},{"name":"GetLocalLogin","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetLocalLogin()","group":"Core","desc":"Gets the logged in user's username."},{"name":"RegisterLoadCallback","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"id"}],"decl":"void RegisterLoadCallback(uint id)","group":"Core","desc":"Tells the scripting to invoke the currently executing plugin when nods are loaded with the given class ID."},{"name":"UnregisterLoadCallback","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"id"}],"decl":"void UnregisterLoadCallback(uint id)","group":"Core","desc":"Tells the scripting to stop invoking the currently executing plugin when nods are loaded with the given class ID."},{"name":"OpenBrowserURL","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"void OpenBrowserURL(const string&in url)","group":"Core","desc":"Opens the default web browser with the given URL."},{"name":"OpenExplorerPath","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"void OpenExplorerPath(const string&in path)","group":"Core","desc":"Opens windows explorer to the specified absolute path."},{"ns":"Fids","name":"GetResource","returntypeid":1140852460,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetResource(const string&in path)","group":"Fids","desc":"Gets a fid from the Resources drive."},{"ns":"Fids","name":"GetProgramData","returntypeid":1140852460,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetProgramData(const string&in path)","group":"Fids","desc":"Gets a fid from the ProgramData drive."},{"ns":"Fids","name":"GetUser","returntypeid":1140852460,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetUser(const string&in path)","group":"Fids","desc":"Gets a fid from the User drive."},{"ns":"Fids","name":"GetGame","returntypeid":1140852460,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetGame(const string&in path)","group":"Fids","desc":"Gets a fid from the Game drive."},{"ns":"Fids","name":"GetFake","returntypeid":1140852460,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetFake(const string&in path)","group":"Fids","desc":"Gets a fid from the Fake drive."},{"ns":"Fids","name":"GetResourceFolder","returntypeid":1140852459,"returntypename":"CSystemFids","returntypedecl":"CSystemFids@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFids@ GetResourceFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the Resources drive."},{"ns":"Fids","name":"GetProgramDataFolder","returntypeid":1140852459,"returntypename":"CSystemFids","returntypedecl":"CSystemFids@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFids@ GetProgramDataFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the ProgramData drive."},{"ns":"Fids","name":"GetUserFolder","returntypeid":1140852459,"returntypename":"CSystemFids","returntypedecl":"CSystemFids@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFids@ GetUserFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the User drive."},{"ns":"Fids","name":"GetGameFolder","returntypeid":1140852459,"returntypename":"CSystemFids","returntypedecl":"CSystemFids@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFids@ GetGameFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the Game drive."},{"ns":"Fids","name":"GetFakeFolder","returntypeid":1140852459,"returntypename":"CSystemFids","returntypedecl":"CSystemFids@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFids@ GetFakeFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the Fake drive."}],"classes":[{"id":67108876,"ns":"","name":"MwId","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwId()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"MwId()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108876,"typename":"MwId","typedecl":"MwId","typeflags":5,"name":""}],"decl":"MwId(const MwId&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"MwId(uint)"}}],"methods":[{"name":"GetName","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetName() const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"Value"}]},{"id":268435470,"ns":"","name":"MwSArray","group":"Core","desc":"Base array structure type used in ManiaPlanet. Can not be modified right now.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwSArray()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwSArray(int&in)"}}],"methods":[{"name":"opAssign","returntypeid":268435470,"returntypename":"MwSArray","returntypedecl":"MwSArray<T>","returntypeflags":3,"args":[{"typeid":268435470,"typename":"MwSArray","typedecl":"MwSArray<T>","typeflags":5,"name":""}],"decl":"MwSArray<T>& opAssign(const MwSArray<T>&in)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435471,"ns":"","name":"MwFastArray","group":"Core","desc":"Array type used in ManiaPlanet.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwFastArray()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwFastArray(int&in)"}}],"methods":[{"name":"opAssign","returntypeid":268435471,"returntypename":"MwFastArray","returntypedecl":"MwFastArray<T>","returntypeflags":3,"args":[{"typeid":268435471,"typename":"MwFastArray","typedecl":"MwFastArray<T>","typeflags":5,"name":""}],"decl":"MwFastArray<T>& opAssign(const MwFastArray<T>&in)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435472,"ns":"","name":"MwFastBuffer","group":"Core","desc":"Buffer type used in ManiaPlanet.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwFastBuffer()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwFastBuffer(int&in)"}}],"methods":[{"name":"opAssign","returntypeid":268435472,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<T>","returntypeflags":3,"args":[{"typeid":268435472,"typename":"MwFastBuffer","typedecl":"MwFastBuffer<T>","typeflags":5,"name":""}],"decl":"MwFastBuffer<T>& opAssign(const MwFastBuffer<T>&in)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"},{"name":"Add","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67112034,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"void Add(const T&in value)"},{"name":"Remove","returntypeid":268435472,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<T>","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"MwFastBuffer<T>& Remove(uint index)"},{"name":"RemoveRange","returntypeid":268435472,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<T>","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"},{"typedecl":"uint","typeflags":0,"name":"count"}],"decl":"MwFastBuffer<T>& RemoveRange(uint index, uint count)"}],"props":[]},{"id":268435473,"ns":"","name":"MwFastBufferCat","group":"Core","desc":"Buffer cat type used in ManiaPlanet.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwFastBufferCat()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwFastBufferCat(int&in)"}}],"methods":[],"props":[]},{"id":268435474,"ns":"","name":"MwRefBuffer","group":"Core","desc":"Reference buffer type used in ManiaPlanet, which contains a static 32 item buffer.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwRefBuffer()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwRefBuffer(int&in)"}}],"methods":[{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435475,"ns":"","name":"MwNodPool","group":"Core","desc":"An allocated pool of nods.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwNodPool()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwNodPool(int&in)"}}],"methods":[{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435576,"ns":"","name":"array","group":"Core","desc":"The main array type used in Openplanet.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1342177400,"returntypename":"array","returntypedecl":"T[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"T[]@ array(int&in)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1342177400,"returntypename":"array","returntypedecl":"T[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""},{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"T[]@ array(int&in, uint length)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1342177400,"returntypename":"array","returntypedecl":"T[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""},{"typedecl":"uint","typeflags":0,"name":"length"},{"typeid":67112034,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"T[]@ array(int&in, uint length, const T&in value)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}},{"type":9,"func":{"name":"$beh9","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int $beh9()"}},{"type":10,"func":{"name":"$beh10","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh10()"}},{"type":11,"func":{"name":"$beh11","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool $beh11()"}},{"type":12,"func":{"name":"$beh12","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh12(int&in)"}},{"type":13,"func":{"name":"$beh13","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh13(int&in)"}},{"type":8,"func":{"name":"$beh8","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""},{"typedecl":"bool","typeflags":2,"name":""}],"decl":"bool $beh8(int&in, bool&out)"}},{"type":4,"func":{"name":"$list","returntypeid":1342177400,"returntypename":"array","returntypedecl":"T[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":"type"},{"typedecl":"int","typeflags":1,"name":"list"}],"decl":"T[]@ $list(int&in type, int&in list) { repeat T }"}}],"methods":[{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"opAssign","returntypeid":268435576,"returntypename":"array","returntypedecl":"T[]","returntypeflags":3,"args":[{"typeid":268435576,"typename":"array","typedecl":"T[]","typeflags":5,"name":""}],"decl":"T[]& opAssign(const T[]&in)"},{"name":"InsertAt","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"index"},{"typeid":67112034,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"void InsertAt(uint index, const T&in value)"},{"name":"InsertAt","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"index"},{"typeid":268435576,"typename":"array","typedecl":"T[]","typeflags":7,"name":"arr"}],"decl":"void InsertAt(uint index, const T[]&inout arr)"},{"name":"InsertLast","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67112034,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"void InsertLast(const T&in value)"},{"name":"RemoveAt","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"void RemoveAt(uint index)"},{"name":"RemoveLast","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void RemoveLast()"},{"name":"RemoveRange","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"start"},{"typedecl":"uint","typeflags":0,"name":"count"}],"decl":"void RemoveRange(uint start, uint count)"},{"name":"Reserve","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"void Reserve(uint length)"},{"name":"Resize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"void Resize(uint length)"},{"name":"SortAsc","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SortAsc()"},{"name":"SortAsc","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"startAt"},{"typedecl":"uint","typeflags":0,"name":"count"}],"decl":"void SortAsc(uint startAt, uint count)"},{"name":"SortDesc","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SortDesc()"},{"name":"SortDesc","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"startAt"},{"typedecl":"uint","typeflags":0,"name":"count"}],"decl":"void SortDesc(uint startAt, uint count)"},{"name":"Reverse","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Reverse()"},{"name":"Find","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67112034,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"int Find(const T&in value) const"},{"name":"Find","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"startAt"},{"typeid":67112034,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"int Find(uint startAt, const T&in value) const"},{"name":"FindByRef","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67112034,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"int FindByRef(const T&in value) const"},{"name":"FindByRef","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"startAt"},{"typeid":67112034,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"int FindByRef(uint startAt, const T&in value) const"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":268435576,"typename":"array","typedecl":"T[]","typeflags":5,"name":""}],"decl":"bool opEquals(const T[]&in) const"},{"name":"IsEmpty","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsEmpty() const"},{"name":"Sort","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108884,"typename":"less","typedecl":"array::less","typeflags":1,"name":""},{"typedecl":"uint","typeflags":0,"name":"startAt","default":"0"},{"typedecl":"uint","typeflags":0,"name":"count","default":"uint ( - 1 )"}],"decl":"void Sort(array::less&in, uint startAt = 0, uint count = uint ( - 1 ))"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"},{"name":"set_Length","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"void set_Length(uint)"},{"name":"SortNonConst","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108885,"typename":"less_nonconst","typedecl":"array::less_nonconst","typeflags":1,"name":""},{"typedecl":"uint","typeflags":0,"name":"startAt","default":"0"},{"typedecl":"uint","typeflags":0,"name":"count","default":"uint ( - 1 )"}],"decl":"void SortNonConst(array::less_nonconst&in, uint startAt = 0, uint count = uint ( - 1 ))"}],"props":[]},{"id":67108886,"ns":"","name":"string","group":"Core","desc":"The string class used in Openplanet as well as the game.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~string()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"string()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string(const string&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"string(const wstring&in)"}}],"methods":[{"name":"opCmp","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"int opCmp(const string&in) const"},{"name":"opIndex","returntypedecl":"uint8","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"uint8& opIndex(uint)"},{"name":"opIndex","returntypedecl":"uint8","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"const uint8& opIndex(uint) const"},{"name":"opAssign","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":3,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string& opAssign(const string&in)"},{"name":"opAddAssign","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":3,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string& opAddAssign(const string&in)"},{"name":"opAdd","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string opAdd(const string&in) const"},{"name":"opAdd","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"string opAdd(const wstring&in) const"},{"name":"opAdd_r","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"string opAdd_r(const wstring&in) const"},{"name":"opAdd","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":""}],"decl":"string opAdd(int64) const"},{"name":"opAdd_r","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":""}],"decl":"string opAdd_r(int64) const"},{"name":"opAdd","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"string opAdd(uint64) const"},{"name":"opAdd_r","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"string opAdd_r(uint64) const"},{"name":"opAdd","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"string opAdd(float) const"},{"name":"opAdd_r","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"string opAdd_r(float) const"},{"name":"opAdd","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"string opAdd(bool) const"},{"name":"opAdd_r","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"string opAdd_r(bool) const"},{"name":"opImplConv","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[],"decl":"wstring opImplConv() const"},{"name":"StartsWith","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool StartsWith(const string&in) const","group":"Core","desc":"Returns true if the string starts with the given substring."},{"name":"EndsWith","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool EndsWith(const string&in) const","group":"Core","desc":"Returns true if the string ends with the given substring."},{"name":"Contains","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool Contains(const string&in) const","group":"Core","desc":"Returns true if the string contains the given substring."},{"name":"IndexOf","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"int IndexOf(const string&in) const","group":"Core","desc":"Searches the string for the given substring and returns the index at which it starts. When it is not found, returns -1."},{"name":"IndexOfI","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"int IndexOfI(const string&in) const","group":"Core","desc":"Same as IndexOf, but case insensitive."},{"name":"get_Length","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int get_Length() const","group":"Core","desc":"The length of the string in bytes."},{"name":"Trim","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Trim() const","group":"Core","desc":"Returns a string from this string with whitespace at the start and end of the string removed. Whitespace includes spaces, tabs, newlines, vertical tabs, feeds, and carriage returns."},{"name":"ToLower","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToLower() const","group":"Core","desc":"Returns a string from this string with all characters in lowercase."},{"name":"ToUpper","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToUpper() const","group":"Core","desc":"Returns a string from this string with all characters in uppercase."},{"name":"SubStr","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"string SubStr(int index) const","group":"Core","desc":"Returns the remainder of the string after the given index. For example; for the string \"Hello\", SubStr(1) returns \"ello\"."},{"name":"SubStr","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typedecl":"int","typeflags":0,"name":"length"}],"decl":"string SubStr(int index, int length) const","group":"Core","desc":"Returns a portion of the string from the index and length. For example; for the string \"Hello\", SubStr(1, 3) returns \"ell\"."},{"name":"Replace","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"search"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"replace"}],"decl":"string Replace(const string&in search, const string&in replace) const","group":"Core","desc":"Returns the string with all the given search substrings replaced with the given replacement string."},{"name":"Split","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":0,"name":"limit","default":"0"}],"decl":"string[]@ Split(const string&in str, int limit = 0) const","group":"Core","desc":"Splits the string on the given substring and returns an array with all the individual parts."}],"props":[]},{"id":67108887,"ns":"","name":"wstring","group":"Core","desc":"The wide string class used primarily in the game for unicode strings. Since Trackmania (2020) the game switched to UTF-8 by default, making wstring essentially the same as string.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~wstring()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"wstring()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"wstring(const wstring&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"wstring(const string&in)"}}],"methods":[{"name":"opAssign","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":3,"args":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"wstring& opAssign(const wstring&in)"},{"name":"opImplConv","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string opImplConv() const"},{"name":"StartsWith","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"bool StartsWith(const wstring&in) const","group":"Core","desc":"Returns true if the string starts with the given substring."},{"name":"EndsWith","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"bool EndsWith(const wstring&in) const","group":"Core","desc":"Returns true if the string ends with the given substring."},{"name":"Contains","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"bool Contains(const wstring&in) const","group":"Core","desc":"Returns true if the string contains the given substring."},{"name":"SubStr","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"start"},{"typedecl":"int","typeflags":0,"name":"length","default":"0"}],"decl":"wstring SubStr(int start, int length = 0) const","group":"Core","desc":"Returns a portion of the string from the index and length. For example; for the string \"Hello\", SubStr(1, 3) returns \"ell\"."},{"name":"get_Length","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int get_Length() const","group":"Core","desc":"The length of the string in bytes. On games older than Trackmania (2020), this returns the length of the string in characters."}],"props":[]},{"id":67108888,"ns":"","name":"dictionaryValue","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~dictionaryValue()"}},{"type":12,"func":{"name":"$beh12","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh12(int&in)"}},{"type":13,"func":{"name":"$beh13","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh13(int&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"dictionaryValue()"}}],"methods":[{"name":"opAssign","returntypeid":67108888,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typeid":67108888,"typename":"dictionaryValue","typedecl":"dictionaryValue","typeflags":5,"name":""}],"decl":"dictionaryValue& opAssign(const dictionaryValue&in)"},{"name":"opHndlAssign","returntypeid":67108888,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"dictionaryValue& opHndlAssign(const ?&in)"},{"name":"opHndlAssign","returntypeid":67108888,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typeid":67108888,"typename":"dictionaryValue","typedecl":"dictionaryValue","typeflags":5,"name":""}],"decl":"dictionaryValue& opHndlAssign(const dictionaryValue&in)"},{"name":"opAssign","returntypeid":67108888,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"dictionaryValue& opAssign(const ?&in)"},{"name":"opAssign","returntypeid":67108888,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typedecl":"double","typeflags":0,"name":""}],"decl":"dictionaryValue& opAssign(double)"},{"name":"opAssign","returntypeid":67108888,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typedecl":"int64","typeflags":0,"name":""}],"decl":"dictionaryValue& opAssign(int64)"},{"name":"opCast","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":2,"name":""}],"decl":"void opCast(?&out)"},{"name":"opConv","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":2,"name":""}],"decl":"void opConv(?&out)"},{"name":"opConv","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 opConv()"},{"name":"opConv","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double opConv()"}],"props":[]},{"id":67108889,"ns":"","name":"dictionary","group":"Core","desc":"The main dictionary type used in Openplanet.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850713,"returntypename":"dictionary","returntypedecl":"dictionary@","returntypeflags":0,"args":[],"decl":"dictionary@ dictionary()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}},{"type":9,"func":{"name":"$beh9","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int $beh9()"}},{"type":10,"func":{"name":"$beh10","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh10()"}},{"type":11,"func":{"name":"$beh11","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool $beh11()"}},{"type":12,"func":{"name":"$beh12","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh12(int&in)"}},{"type":13,"func":{"name":"$beh13","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh13(int&in)"}},{"type":4,"func":{"name":"$list","returntypeid":1140850713,"returntypename":"dictionary","returntypedecl":"dictionary@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"dictionary@ $list(int&in) { repeat { string, ? } }"}}],"methods":[{"name":"opAssign","returntypeid":67108889,"returntypename":"dictionary","returntypedecl":"dictionary","returntypeflags":3,"args":[{"typeid":67108889,"typename":"dictionary","typedecl":"dictionary","typeflags":5,"name":""}],"decl":"dictionary& opAssign(const dictionary&in)"},{"name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Set(const string&in, const ?&in)"},{"name":"Get","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"?","typeflags":2,"name":""}],"decl":"bool Get(const string&in, ?&out) const"},{"name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"int64","typeflags":5,"name":""}],"decl":"void Set(const string&in, const int64&in)"},{"name":"Get","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"int64","typeflags":2,"name":""}],"decl":"bool Get(const string&in, int64&out) const"},{"name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"double","typeflags":5,"name":""}],"decl":"void Set(const string&in, const double&in)"},{"name":"Get","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"double","typeflags":2,"name":""}],"decl":"bool Get(const string&in, double&out) const"},{"name":"Exists","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool Exists(const string&in) const"},{"name":"IsEmpty","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsEmpty() const"},{"name":"GetSize","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint GetSize() const"},{"name":"Delete","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool Delete(const string&in)"},{"name":"DeleteAll","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void DeleteAll()"},{"name":"GetKeys","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ GetKeys() const"},{"name":"opIndex","returntypeid":67108888,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"dictionaryValue& opIndex(const string&in)"},{"name":"opIndex","returntypeid":67108888,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":7,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"const dictionaryValue& opIndex(const string&in) const"}],"props":[]},{"id":67108890,"ns":"","name":"ref","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~ref()"}},{"type":12,"func":{"name":"$beh12","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh12(int&in)"}},{"type":13,"func":{"name":"$beh13","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh13(int&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"ref()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"ref","typedecl":"ref","typeflags":5,"name":""}],"decl":"ref(const ref&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"ref(const ?&in)"}}],"methods":[{"name":"opCast","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":2,"name":""}],"decl":"void opCast(?&out)"},{"name":"opHndlAssign","returntypeid":67108890,"returntypename":"ref","returntypedecl":"ref","returntypeflags":3,"args":[{"typeid":67108890,"typename":"ref","typedecl":"ref","typeflags":5,"name":""}],"decl":"ref& opHndlAssign(const ref&in)"},{"name":"opHndlAssign","returntypeid":67108890,"returntypename":"ref","returntypedecl":"ref","returntypeflags":3,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"ref& opHndlAssign(const ?&in)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"ref","typedecl":"ref","typeflags":5,"name":""}],"decl":"bool opEquals(const ref&in) const"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool opEquals(const ?&in) const"}],"props":[]},{"id":67108891,"ns":"","name":"vec2","group":"Math","desc":"A 2-dimensional vector.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~vec2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"vec2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"vec2(float x, float y)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2(const vec2&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float opIndex() const"},{"name":"opAdd","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2 opAdd(const vec2&in) const"},{"name":"opSub","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2 opSub(const vec2&in) const"},{"name":"opMul","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2 opMul(const vec2&in) const"},{"name":"opMul","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opMul(float) const"},{"name":"opDiv","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2 opDiv(const vec2&in) const"},{"name":"opDiv","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opDiv(float) const"},{"name":"opAddAssign","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2& opAddAssign(const vec2&in)"},{"name":"opSubAssign","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2& opSubAssign(const vec2&in)"},{"name":"opMulAssign","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2& opMulAssign(const vec2&in)"},{"name":"opMulAssign","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2& opMulAssign(float)"},{"name":"opDivAssign","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2& opDivAssign(const vec2&in)"},{"name":"opDivAssign","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2& opDivAssign(float)"},{"name":"Length","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Length() const"},{"name":"LengthSquared","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float LengthSquared() const"},{"name":"Normalized","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 Normalized() const"},{"name":"ToString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}]},{"id":67108892,"ns":"","name":"vec3","group":"Math","desc":"A 3-dimensional vector.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~vec3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"vec3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"}],"decl":"vec3(float x, float y, float z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3(const vec3&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float opIndex() const"},{"name":"opAdd","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opAdd(const vec3&in) const"},{"name":"opSub","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opSub(const vec3&in) const"},{"name":"opMul","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul(const vec3&in) const"},{"name":"opMul","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opMul(float) const"},{"name":"opDiv","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opDiv(const vec3&in) const"},{"name":"opDiv","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opDiv(float) const"},{"name":"opAddAssign","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3& opAddAssign(const vec3&in)"},{"name":"opSubAssign","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3& opSubAssign(const vec3&in)"},{"name":"opMulAssign","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3& opMulAssign(const vec3&in)"},{"name":"opMulAssign","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3& opMulAssign(float)"},{"name":"opDivAssign","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3& opDivAssign(const vec3&in)"},{"name":"opDivAssign","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3& opDivAssign(float)"},{"name":"Length","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Length() const"},{"name":"LengthSquared","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float LengthSquared() const"},{"name":"Normalized","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 Normalized() const"},{"name":"get_xy","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 get_xy() const"},{"name":"ToString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"}]},{"id":67108893,"ns":"","name":"vec4","group":"Math","desc":"A 4-dimensional vector.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~vec4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"vec4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"},{"typedecl":"float","typeflags":0,"name":"w"}],"decl":"vec4(float x, float y, float z, float w)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4(const vec4&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float opIndex() const"},{"name":"opAdd","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opAdd(const vec4&in) const"},{"name":"opSub","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opSub(const vec4&in) const"},{"name":"opMul","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opMul(const vec4&in) const"},{"name":"opMul","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opMul(float) const"},{"name":"opDiv","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opDiv(const vec4&in) const"},{"name":"opDiv","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opDiv(float) const"},{"name":"opAddAssign","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4& opAddAssign(const vec4&in)"},{"name":"opSubAssign","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4& opSubAssign(const vec4&in)"},{"name":"opMulAssign","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4& opMulAssign(const vec4&in)"},{"name":"opMulAssign","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4& opMulAssign(float)"},{"name":"opDivAssign","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4& opDivAssign(const vec4&in)"},{"name":"opDivAssign","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4& opDivAssign(float)"},{"name":"Length","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Length() const"},{"name":"LengthSquared","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float LengthSquared() const"},{"name":"Normalized","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[],"decl":"vec4 Normalized() const"},{"name":"get_xyz","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 get_xyz() const"},{"name":"ToString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"},{"typedecl":"float","typeflags":0,"name":"w"}]},{"id":67108894,"ns":"","name":"int2","group":"Math","desc":"A 2-dimensional vector for integers.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~int2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"int2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"}],"decl":"int2(int x, int y)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2(const int2&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int opIndex() const"},{"name":"opAdd","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2 opAdd(const int2&in) const"},{"name":"opSub","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2 opSub(const int2&in) const"},{"name":"opMul","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2 opMul(const int2&in) const"},{"name":"opMul","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opMul(int) const"},{"name":"opDiv","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2 opDiv(const int2&in) const"},{"name":"opDiv","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opDiv(int) const"},{"name":"opAddAssign","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2& opAddAssign(const int2&in)"},{"name":"opSubAssign","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2& opSubAssign(const int2&in)"},{"name":"opMulAssign","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2& opMulAssign(const int2&in)"},{"name":"opMulAssign","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2& opMulAssign(int)"},{"name":"opDivAssign","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typeid":67108894,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2& opDivAssign(const int2&in)"},{"name":"opDivAssign","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2& opDivAssign(int)"},{"name":"ToString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"}]},{"id":67108895,"ns":"","name":"int3","group":"Math","desc":"A 3-dimensional vector for integers.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~int3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"int3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"},{"typedecl":"int","typeflags":0,"name":"z"}],"decl":"int3(int x, int y, int z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3(const int3&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int opIndex() const"},{"name":"opAdd","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3 opAdd(const int3&in) const"},{"name":"opSub","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3 opSub(const int3&in) const"},{"name":"opMul","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3 opMul(const int3&in) const"},{"name":"opMul","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opMul(int) const"},{"name":"opDiv","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3 opDiv(const int3&in) const"},{"name":"opDiv","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opDiv(int) const"},{"name":"opAddAssign","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3& opAddAssign(const int3&in)"},{"name":"opSubAssign","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3& opSubAssign(const int3&in)"},{"name":"opMulAssign","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3& opMulAssign(const int3&in)"},{"name":"opMulAssign","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3& opMulAssign(int)"},{"name":"opDivAssign","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typeid":67108895,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3& opDivAssign(const int3&in)"},{"name":"opDivAssign","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3& opDivAssign(int)"},{"name":"get_xy","returntypeid":67108894,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[],"decl":"int2 get_xy() const"},{"name":"ToString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"},{"typedecl":"int","typeflags":0,"name":"z"}]},{"id":67108896,"ns":"","name":"nat2","group":"Math","desc":"A 2-dimensional vector for unsigned integers.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~nat2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"nat2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"x"},{"typedecl":"uint","typeflags":0,"name":"y"},{"typedecl":"uint","typeflags":0,"name":"z"}],"decl":"nat2(uint x, uint y, uint z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2(const nat2&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint opIndex() const"},{"name":"opAdd","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2 opAdd(const nat2&in) const"},{"name":"opSub","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2 opSub(const nat2&in) const"},{"name":"opMul","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2 opMul(const nat2&in) const"},{"name":"opMul","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opMul(uint) const"},{"name":"opDiv","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2 opDiv(const nat2&in) const"},{"name":"opDiv","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opDiv(uint) const"},{"name":"opAddAssign","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2& opAddAssign(const nat2&in)"},{"name":"opSubAssign","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2& opSubAssign(const nat2&in)"},{"name":"opMulAssign","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2& opMulAssign(const nat2&in)"},{"name":"opMulAssign","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2& opMulAssign(uint)"},{"name":"opDivAssign","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typeid":67108896,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2& opDivAssign(const nat2&in)"},{"name":"opDivAssign","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2& opDivAssign(uint)"},{"name":"ToString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"x"},{"typedecl":"uint","typeflags":0,"name":"y"}]},{"id":67108897,"ns":"","name":"nat3","group":"Math","desc":"A 3-dimensional vector for unsigned integers.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~nat3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"nat3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"x"},{"typedecl":"uint","typeflags":0,"name":"y"},{"typedecl":"uint","typeflags":0,"name":"z"}],"decl":"nat3(uint x, uint y, uint z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3(const nat3&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint opIndex() const"},{"name":"opAdd","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3 opAdd(const nat3&in) const"},{"name":"opSub","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3 opSub(const nat3&in) const"},{"name":"opMul","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3 opMul(const nat3&in) const"},{"name":"opMul","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opMul(uint) const"},{"name":"opDiv","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3 opDiv(const nat3&in) const"},{"name":"opDiv","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opDiv(uint) const"},{"name":"opAddAssign","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3& opAddAssign(const nat3&in)"},{"name":"opSubAssign","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3& opSubAssign(const nat3&in)"},{"name":"opMulAssign","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3& opMulAssign(const nat3&in)"},{"name":"opMulAssign","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3& opMulAssign(uint)"},{"name":"opDivAssign","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typeid":67108897,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3& opDivAssign(const nat3&in)"},{"name":"opDivAssign","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3& opDivAssign(uint)"},{"name":"get_xy","returntypeid":67108896,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[],"decl":"nat2 get_xy() const"},{"name":"ToString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"x"},{"typedecl":"uint","typeflags":0,"name":"y"},{"typedecl":"uint","typeflags":0,"name":"z"}]},{"id":67108898,"ns":"","name":"quat","group":"Math","desc":"A quaternion.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~quat()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"quat()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"euler"}],"decl":"quat(const vec3&in euler)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"axis"},{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"quat(const vec3&in axis, float angle)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"},{"typedecl":"float","typeflags":0,"name":"w"}],"decl":"quat(float x, float y, float z, float w)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108898,"typename":"quat","typedecl":"quat","typeflags":5,"name":""}],"decl":"quat(const quat&in)"}}],"methods":[{"name":"opMul","returntypeid":67108898,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[{"typeid":67108898,"typename":"quat","typedecl":"quat","typeflags":5,"name":""}],"decl":"quat opMul(const quat&in)"},{"name":"opMul","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul(const vec3&in)"},{"name":"opMul_r","returntypeid":67108898,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[{"typeid":67108898,"typename":"quat","typedecl":"quat","typeflags":5,"name":""}],"decl":"quat opMul_r(const quat&in)"},{"name":"opMul_r","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul_r(const vec3&in)"},{"name":"get_xyz","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 get_xyz() const"},{"name":"Angle","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Angle() const"},{"name":"Axis","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 Axis() const"},{"name":"Euler","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 Euler() const"},{"name":"Inverse","returntypeid":67108898,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[],"decl":"quat Inverse() const"},{"name":"Length","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Length() const"},{"name":"LengthSquared","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float LengthSquared() const"},{"name":"Normalized","returntypeid":67108898,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[],"decl":"quat Normalized() const"},{"name":"ToString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"},{"typedecl":"float","typeflags":0,"name":"w"}]},{"id":67108899,"ns":"","name":"iso3","group":"Math","desc":"A matrix with 3 rows and 2 columns.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~iso3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"iso3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108900,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"iso3(const mat3&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108899,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":""}],"decl":"iso3(const iso3&in)"}}],"methods":[{"name":"get_xx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xx() const"},{"name":"get_xy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xy() const"},{"name":"get_yx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yx() const"},{"name":"get_yy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yy() const"},{"name":"get_tx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tx() const"},{"name":"get_ty","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_ty() const"},{"name":"Translate","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void Translate(float x, float y)"}],"props":[]},{"id":67108900,"ns":"","name":"mat3","group":"Math","desc":"A matrix with 3 rows and 3 columns.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~mat3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"mat3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108899,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":""}],"decl":"mat3(const iso3&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108900,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3(const mat3&in)"}}],"methods":[{"name":"get_xx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xx() const"},{"name":"get_xy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xy() const"},{"name":"get_xz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xz() const"},{"name":"get_yx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yx() const"},{"name":"get_yy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yy() const"},{"name":"get_yz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yz() const"},{"name":"get_zx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zx() const"},{"name":"get_zy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zy() const"},{"name":"get_zz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zz() const"},{"name":"opMul","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108900,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3 opMul(const mat3&in)"},{"name":"opMulAssign","returntypeid":67108900,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":3,"args":[{"typeid":67108900,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3& opMulAssign(const mat3&in)"},{"name":"opMul","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec3 opMul(const vec2&in)"},{"name":"opMul","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul(const vec3&in)"},{"name":"opMul_r","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec3 opMul_r(const vec2&in)"},{"name":"opMul_r","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul_r(const vec3&in)"}],"props":[]},{"id":67108901,"ns":"","name":"iso4","group":"Math","desc":"A matrix with 4 rows and 3 columns.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~iso4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"iso4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108902,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"iso4(const mat4&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108901,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":""}],"decl":"iso4(const iso4&in)"}}],"methods":[{"name":"get_xx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xx() const"},{"name":"get_xy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xy() const"},{"name":"get_xz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xz() const"},{"name":"get_yx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yx() const"},{"name":"get_yy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yy() const"},{"name":"get_yz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yz() const"},{"name":"get_zx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zx() const"},{"name":"get_zy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zy() const"},{"name":"get_zz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zz() const"},{"name":"get_tx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tx() const"},{"name":"get_ty","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_ty() const"},{"name":"get_tz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tz() const"},{"name":"Translate","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"}],"decl":"void Translate(float x, float y, float z)"}],"props":[]},{"id":67108902,"ns":"","name":"mat4","group":"Math","desc":"A matrix with 4 rows and 4 columns.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~mat4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"mat4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108901,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":""}],"decl":"mat4(const iso4&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108902,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4(const mat4&in)"}}],"methods":[{"name":"get_xx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xx() const"},{"name":"get_xy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xy() const"},{"name":"get_xz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xz() const"},{"name":"get_xw","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xw() const"},{"name":"get_yx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yx() const"},{"name":"get_yy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yy() const"},{"name":"get_yz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yz() const"},{"name":"get_yw","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yw() const"},{"name":"get_zx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zx() const"},{"name":"get_zy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zy() const"},{"name":"get_zz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zz() const"},{"name":"get_zw","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zw() const"},{"name":"get_tx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tx() const"},{"name":"get_ty","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_ty() const"},{"name":"get_tz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tz() const"},{"name":"get_tw","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tw() const"},{"name":"opMul","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108902,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4 opMul(const mat4&in)"},{"name":"opMulAssign","returntypeid":67108902,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":3,"args":[{"typeid":67108902,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4& opMulAssign(const mat4&in)"},{"name":"opMul","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec4 opMul(const vec3&in)"},{"name":"opMul","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opMul(const vec4&in)"},{"name":"opMul_r","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec4 opMul_r(const vec3&in)"},{"name":"opMul_r","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opMul_r(const vec4&in)"}],"props":[]},{"id":67108903,"ns":"","name":"RGBAColor","group":"MwFoundations","desc":"The RGBAColor type used in Maniaplanet.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~RGBAColor()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"RGBAColor()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108903,"typename":"RGBAColor","typedecl":"RGBAColor","typeflags":5,"name":""}],"decl":"RGBAColor(const RGBAColor&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"RGBAColor(const vec3&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"RGBAColor(const vec4&in)"}}],"methods":[{"name":"ToVec3","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 ToVec3()","group":"MwFoundations","desc":"Converts this color to a vec3, ignoring the alpha value."},{"name":"ToVec4","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[],"decl":"vec4 ToVec4()","group":"MwFoundations","desc":"Converts this color to a vec4."}],"props":[{"typedecl":"uint8","typeflags":0,"name":"r"},{"typedecl":"uint8","typeflags":0,"name":"g"},{"typedecl":"uint8","typeflags":0,"name":"b"},{"typedecl":"uint8","typeflags":0,"name":"a"},{"typedecl":"uint","typeflags":0,"name":"rgba"}]},{"id":67108904,"ns":"","name":"MemoryBuffer","group":"Core","desc":"A buffer of memory. Can be used in IO or Import calls. You can write to this or read from it, which moves the cursor within the buffer.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[],"decl":"MemoryBuffer@ MemoryBuffer()"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":""}],"decl":"MemoryBuffer@ MemoryBuffer(const MemoryBuffer&in)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"MemoryBuffer@ MemoryBuffer(uint64 size)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"},{"typedecl":"uint8","typeflags":0,"name":"init"}],"decl":"MemoryBuffer@ MemoryBuffer(uint64 size, uint8 init)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"opAssign","returntypeid":67108904,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer","returntypeflags":3,"args":[{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":""}],"decl":"MemoryBuffer& opAssign(const MemoryBuffer&in)"},{"name":"Resize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"void Resize(uint64 size)"},{"name":"GetSize","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 GetSize() const"},{"name":"Seek","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"pos"},{"typedecl":"int","typeflags":0,"name":"dir","default":"0"}],"decl":"void Seek(uint64 pos, int dir = 0)"},{"name":"AtEnd","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool AtEnd() const"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":5,"name":"i"}],"decl":"void Write(const uint8&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":5,"name":"i"}],"decl":"void Write(const uint16&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":5,"name":"i"}],"decl":"void Write(const uint&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":5,"name":"i"}],"decl":"void Write(const uint64&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":5,"name":"i"}],"decl":"void Write(const int8&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":5,"name":"i"}],"decl":"void Write(const int16&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":5,"name":"i"}],"decl":"void Write(const int&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":5,"name":"i"}],"decl":"void Write(const int64&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":5,"name":"i"}],"decl":"void Write(const float&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":5,"name":"i"}],"decl":"void Write(const double&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void Write(const string&in str)"},{"name":"WriteFromBuffer","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":"buf"},{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"void WriteFromBuffer(const MemoryBuffer&in buf, uint64 size)"},{"name":"ReadUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 ReadUInt8()"},{"name":"ReadUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 ReadUInt16()"},{"name":"ReadUInt32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint ReadUInt32()"},{"name":"ReadUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 ReadUInt64()"},{"name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 ReadInt8()"},{"name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 ReadInt16()"},{"name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadInt32()"},{"name":"ReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ReadInt64()"},{"name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float ReadFloat()"},{"name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double ReadDouble()"},{"name":"ReadString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"string ReadString(uint64 size)"},{"name":"ReadBuffer","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"MemoryBuffer@ ReadBuffer(uint64 size)"},{"name":"WriteFromBase64","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void WriteFromBase64(const string&in)"},{"name":"ReadToBase64","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"string ReadToBase64(uint64 size)"}],"props":[]},{"id":67108905,"ns":"","name":"DataRef","group":"MwFoundations","desc":"The data reference type used in Maniaplanet.","behaviors":[],"methods":[],"props":[{"typeid":67108887,"typename":"wstring","typedecl":"wstring","typeflags":0,"name":"Filename"}]},{"id":67108906,"ns":"Time","name":"Info","group":"Time","desc":"Information about a specific timestamp, simplified into its common components.","behaviors":[],"methods":[],"props":[{"typedecl":"int","typeflags":0,"name":"Year"},{"typedecl":"int","typeflags":0,"name":"Month"},{"typedecl":"int","typeflags":0,"name":"Day"},{"typedecl":"int","typeflags":0,"name":"Hour"},{"typedecl":"int","typeflags":0,"name":"Minute"},{"typedecl":"int","typeflags":0,"name":"Second"}]},{"id":67108908,"ns":"Net","name":"HttpRequest","group":"Net","desc":"Holds the state of an executing HTTP request.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850732,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[],"decl":"Net::HttpRequest@ HttpRequest()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Start","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Start()","group":"","desc":"Starts executing the request. Does nothing if the request has already started."},{"name":"Finished","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool Finished()","group":"","desc":"Returns true if the request has finished execution. This will return true even in the case of an error."},{"name":"Error","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Error()","group":"","desc":"Returns an error message, if there was an error. Otherwise, this returns an empty string. This function is useful in the rare case that `ResponseCode()` returns 0."},{"name":"ResponseCode","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ResponseCode()","group":"","desc":"Returns the HTTP response code, for example 200 or 404."},{"name":"ResponseHeader","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"string ResponseHeader(const string&in key)","group":"","desc":"Gets the value of a specific response header. The key is case insensitive."},{"name":"ResponseHeaders","returntypeid":1140850713,"returntypename":"dictionary","returntypedecl":"dictionary@","returntypeflags":0,"args":[],"decl":"dictionary@ ResponseHeaders()","group":"","desc":"Gets a dictionary of all response headers."},{"name":"String","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string String()","group":"","desc":"Returns the response body as a string."},{"name":"Buffer","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[],"decl":"MemoryBuffer@ Buffer()","group":"","desc":"Returns the response body as a MemoryBuffer."},{"name":"SaveToFile","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"void SaveToFile(const string&in path)","group":"","desc":"Saves the response body to a file. The given path should be an absolute path."}],"props":[{"typeid":43,"typename":"HttpMethod","typedecl":"Net::HttpMethod","typeflags":0,"name":"Method"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"Url"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"Body"},{"typeid":1140850713,"typename":"dictionary","typedecl":"dictionary@","typeflags":0,"name":"Headers"},{"typedecl":"bool","typeflags":0,"name":"Redirect"}]},{"id":67108909,"ns":"Net","name":"Socket","group":"Net","desc":"Represents a TCP socket.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850733,"returntypename":"Socket","returntypedecl":"Net::Socket@","returntypeflags":0,"args":[],"decl":"Net::Socket@ Socket()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Connect","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"host"},{"typedecl":"uint16","typeflags":0,"name":"port"}],"decl":"bool Connect(const string&in host, uint16 port)"},{"name":"Listen","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"host"},{"typedecl":"uint16","typeflags":0,"name":"port"}],"decl":"bool Listen(const string&in host, uint16 port)"},{"name":"Close","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Close()"},{"name":"Accept","returntypeid":1140850733,"returntypename":"Socket","returntypedecl":"Net::Socket@","returntypeflags":0,"args":[],"decl":"Net::Socket@ Accept()"},{"name":"GetRemoteIP","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetRemoteIP()"},{"name":"CanRead","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanRead()"},{"name":"CanWrite","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanWrite()"},{"name":"Available","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Available()"},{"name":"ReadRaw","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"bytes"}],"decl":"string ReadRaw(int bytes)"},{"name":"ReadLine","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":2,"name":"str"}],"decl":"bool ReadLine(string&out str)"},{"name":"WriteRaw","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"bool WriteRaw(const string&in str)"},{"name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 ReadInt8()"},{"name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 ReadInt16()"},{"name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadInt32()"},{"name":"ReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ReadInt64()"},{"name":"ReadUint8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 ReadUint8()"},{"name":"ReadUint16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 ReadUint16()"},{"name":"ReadUint32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint ReadUint32()"},{"name":"ReadUint64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 ReadUint64()"},{"name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float ReadFloat()"},{"name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double ReadDouble()"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":0,"name":"x"}],"decl":"bool Write(int8 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":0,"name":"x"}],"decl":"bool Write(int16 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"}],"decl":"bool Write(int x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"x"}],"decl":"bool Write(int64 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":0,"name":"x"}],"decl":"bool Write(uint8 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":"x"}],"decl":"bool Write(uint16 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"x"}],"decl":"bool Write(uint x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"x"}],"decl":"bool Write(uint64 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"bool Write(float x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"x"}],"decl":"bool Write(double x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"x"}],"decl":"bool Write(const string&in x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":"b"},{"typedecl":"uint64","typeflags":0,"name":"size","default":"0"}],"decl":"bool Write(MemoryBuffer&in b, uint64 size = 0)"}],"props":[]},{"id":67108910,"ns":"Net","name":"SecureSocket","group":"Net","desc":"Represents a TCP socket with a TLS encryption layer.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850734,"returntypename":"SecureSocket","returntypedecl":"Net::SecureSocket@","returntypeflags":0,"args":[],"decl":"Net::SecureSocket@ SecureSocket()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Connect","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"host"},{"typedecl":"uint16","typeflags":0,"name":"port"}],"decl":"bool Connect(const string&in host, uint16 port)"},{"name":"Connecting","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool Connecting()"},{"name":"Close","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Close()"},{"name":"CanRead","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanRead()"},{"name":"CanWrite","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanWrite()"},{"name":"Available","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Available()"},{"name":"ReadRaw","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"bytes"}],"decl":"string ReadRaw(int bytes)"},{"name":"ReadLine","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":2,"name":"str"}],"decl":"bool ReadLine(string&out str)"},{"name":"WriteRaw","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"bool WriteRaw(const string&in str)"},{"name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 ReadInt8()"},{"name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 ReadInt16()"},{"name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadInt32()"},{"name":"ReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ReadInt64()"},{"name":"ReadUint8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 ReadUint8()"},{"name":"ReadUint16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 ReadUint16()"},{"name":"ReadUint32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint ReadUint32()"},{"name":"ReadUint64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 ReadUint64()"},{"name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float ReadFloat()"},{"name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double ReadDouble()"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":0,"name":"x"}],"decl":"bool Write(int8 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":0,"name":"x"}],"decl":"bool Write(int16 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"}],"decl":"bool Write(int x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"x"}],"decl":"bool Write(int64 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":0,"name":"x"}],"decl":"bool Write(uint8 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":"x"}],"decl":"bool Write(uint16 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"x"}],"decl":"bool Write(uint x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"x"}],"decl":"bool Write(uint64 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"bool Write(float x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"x"}],"decl":"bool Write(double x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"x"}],"decl":"bool Write(const string&in x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":"b"},{"typedecl":"uint64","typeflags":0,"name":"size","default":"0"}],"decl":"bool Write(MemoryBuffer&in b, uint64 size = 0)"}],"props":[]},{"id":67108911,"ns":"Reflection","name":"MwMemberInfo","group":"Reflection","desc":"Information about a type's member.","behaviors":[],"methods":[{"name":"get_Name","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_Name() const"},{"name":"get_NameDescriptive","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_NameDescriptive() const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"ID"},{"typedecl":"uint16","typeflags":0,"name":"Offset"}]},{"id":67108912,"ns":"Reflection","name":"MwClassInfo","group":"Reflection","desc":"Information about a type.","behaviors":[],"methods":[{"name":"get_Members","returntypeid":1879051363,"returntypename":"array","returntypedecl":"const Reflection::MwMemberInfo@[]@","returntypeflags":0,"args":[],"decl":"const Reflection::MwMemberInfo@[]@ get_Members() const"},{"name":"get_Name","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_Name() const"},{"name":"get_Description","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_Description() const"},{"name":"get_UserName","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_UserName() const"},{"name":"get_FileExtension","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_FileExtension() const"},{"name":"GetMember","returntypeid":1677721647,"returntypename":"MwMemberInfo","returntypedecl":"const Reflection::MwMemberInfo@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"const Reflection::MwMemberInfo@ GetMember(const string&in name) const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"ID"},{"typeid":1677721648,"typename":"MwClassInfo","typedecl":"const Reflection::MwClassInfo@","typeflags":0,"name":"BaseType"}]},{"id":67108916,"ns":"Meta","name":"PluginSetting","group":"Meta","desc":"Information about a plugin's setting.","behaviors":[],"methods":[{"name":"get_VarName","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_VarName()"},{"name":"get_Name","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Name()"},{"name":"get_Type","returntypeid":51,"returntypename":"PluginSettingType","returntypedecl":"Meta::PluginSettingType","returntypeflags":0,"args":[],"decl":"Meta::PluginSettingType get_Type()"},{"name":"get_TypeName","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_TypeName()"},{"name":"get_Description","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Description()"},{"name":"get_Category","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Category()"},{"name":"get_Visible","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_Visible()"},{"name":"ReadBool","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool ReadBool()"},{"name":"ReadEnum","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadEnum()"},{"name":"ReadEnum","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":2,"name":"name"}],"decl":"int ReadEnum(string&out name)"},{"name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float ReadFloat()"},{"name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double ReadDouble()"},{"name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 ReadInt8()"},{"name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 ReadInt16()"},{"name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadInt32()"},{"name":"ReadString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadString()"},{"name":"ReadVec2","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 ReadVec2()"},{"name":"ReadVec3","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 ReadVec3()"},{"name":"ReadVec4","returntypeid":67108893,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[],"decl":"vec4 ReadVec4()"},{"name":"ReadUint8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 ReadUint8()"},{"name":"ReadUint16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 ReadUint16()"},{"name":"ReadUint32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint ReadUint32()"},{"name":"WriteBool","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"void WriteBool(bool)"},{"name":"WriteEnum","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"void WriteEnum(int)"},{"name":"WriteFloat","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"void WriteFloat(float)"},{"name":"WriteDouble","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":""}],"decl":"void WriteDouble(double)"},{"name":"WriteInt8","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":0,"name":""}],"decl":"void WriteInt8(int8)"},{"name":"WriteInt16","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":0,"name":""}],"decl":"void WriteInt16(int16)"},{"name":"WriteInt32","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"void WriteInt32(int)"},{"name":"WriteString","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void WriteString(const string&in)"},{"name":"WriteVec2","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"void WriteVec2(const vec2&in)"},{"name":"WriteVec3","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108892,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"void WriteVec3(const vec3&in)"},{"name":"WriteVec4","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"void WriteVec4(const vec4&in)"},{"name":"WriteUint8","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":0,"name":""}],"decl":"void WriteUint8(uint8)"},{"name":"WriteUint16","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":""}],"decl":"void WriteUint16(uint16)"},{"name":"WriteUint32","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"void WriteUint32(uint)"}],"props":[]},{"id":67108917,"ns":"Meta","name":"Plugin","group":"Meta","desc":"Information about an Openplanet plugin.","behaviors":[],"methods":[{"name":"get_ID","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_ID()"},{"name":"get_Type","returntypeid":49,"returntypename":"PluginType","returntypedecl":"Meta::PluginType","returntypeflags":0,"args":[],"decl":"Meta::PluginType get_Type()"},{"name":"get_Name","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Name()"},{"name":"get_Author","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Author()"},{"name":"get_Category","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Category()"},{"name":"get_Blocks","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ get_Blocks()"},{"name":"get_Dependencies","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ get_Dependencies()"},{"name":"get_OptionalDependencies","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ get_OptionalDependencies()"},{"name":"get_SiteID","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int get_SiteID()"},{"name":"get_Version","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Version()"},{"name":"get_Source","returntypeid":50,"returntypename":"PluginSource","returntypedecl":"Meta::PluginSource","returntypeflags":0,"args":[],"decl":"Meta::PluginSource get_Source()"},{"name":"get_SourcePath","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_SourcePath()"},{"name":"get_Enabled","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_Enabled()"},{"name":"get_Unstable","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_Unstable()"},{"name":"GetSettings","returntypeid":1342180452,"returntypename":"array","returntypedecl":"Meta::PluginSetting@[]@","returntypeflags":0,"args":[],"decl":"Meta::PluginSetting@[]@ GetSettings()"},{"name":"Enable","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Enable()"},{"name":"Disable","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Disable()"}],"props":[]},{"id":67108918,"ns":"Meta","name":"PluginIndex","group":"Meta","desc":"An index of plugin information that can be sorted by its dependency tree.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850742,"returntypename":"PluginIndex","returntypedecl":"Meta::PluginIndex@","returntypeflags":0,"args":[],"decl":"Meta::PluginIndex@ PluginIndex()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"AddTree","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850741,"typename":"Plugin","typedecl":"Meta::Plugin@","typeflags":0,"name":"plugin"}],"decl":"void AddTree(Meta::Plugin@ plugin)"},{"name":"Add","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850741,"typename":"Plugin","typedecl":"Meta::Plugin@","typeflags":0,"name":"plugin"}],"decl":"void Add(Meta::Plugin@ plugin)"},{"name":"DependencySort","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void DependencySort()"},{"name":"GetItem","returntypeid":1140850743,"returntypename":"PluginIndexItem","returntypedecl":"Meta::PluginIndexItem@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"Meta::PluginIndexItem@ GetItem(int index)"},{"name":"GetCount","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetCount()"}],"props":[]},{"id":67108919,"ns":"Meta","name":"PluginIndexItem","group":"Meta","desc":"An item in a PluginIndex.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"get_ID","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_ID()"},{"name":"get_Path","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Path()"},{"name":"get_Type","returntypeid":49,"returntypename":"PluginType","returntypedecl":"Meta::PluginType","returntypeflags":0,"args":[],"decl":"Meta::PluginType get_Type()"},{"name":"get_Source","returntypeid":50,"returntypename":"PluginSource","returntypedecl":"Meta::PluginSource","returntypeflags":0,"args":[],"decl":"Meta::PluginSource get_Source()"}],"props":[]},{"id":67108920,"ns":"Meta","name":"PluginCoroutine","group":"Core","desc":"A coroutine for a plugin.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"IsRunning","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsRunning()","group":"","desc":"Returns true if the coroutine is still running, or false if the coroutine has finished its execution. This will also return true when the coroutine is suspended."}],"props":[]},{"id":67108921,"ns":"Meta","name":"UnloadedPluginInfo","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~UnloadedPluginInfo()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"UnloadedPluginInfo()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108921,"typename":"UnloadedPluginInfo","typedecl":"Meta::UnloadedPluginInfo","typeflags":5,"name":""}],"decl":"UnloadedPluginInfo(const Meta::UnloadedPluginInfo&in)"}}],"methods":[],"props":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"Path"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"ID"},{"typeid":50,"typename":"PluginSource","typedecl":"Meta::PluginSource","typeflags":0,"name":"Source"},{"typeid":49,"typename":"PluginType","typedecl":"Meta::PluginType","typeflags":0,"name":"Type"}]},{"id":67108922,"ns":"","name":"CMwStack","group":"MwFoundations","desc":"Stack class used for calling engine procs.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~CMwStack()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"CMwStack()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108922,"typename":"CMwStack","typedecl":"CMwStack","typeflags":5,"name":""}],"decl":"CMwStack(const CMwStack&in)"}}],"methods":[{"name":"CurrentBool","returntypedecl":"bool","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"bool& CurrentBool(int offset = 0)"},{"name":"CurrentNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"CMwNod@& CurrentNod(int offset = 0)"},{"name":"CurrentEnum","returntypedecl":"int","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"int& CurrentEnum(int offset = 0)"},{"name":"CurrentIso4","returntypeid":67108901,"returntypename":"iso4","returntypedecl":"iso4","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"iso4& CurrentIso4(int offset = 0)"},{"name":"CurrentVec3","returntypeid":67108892,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"vec3& CurrentVec3(int offset = 0)"},{"name":"CurrentInt3","returntypeid":67108895,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"int3& CurrentInt3(int offset = 0)"},{"name":"CurrentNat3","returntypeid":67108897,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"nat3& CurrentNat3(int offset = 0)"},{"name":"CurrentInt","returntypedecl":"int","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"int& CurrentInt(int offset = 0)"},{"name":"CurrentUint","returntypedecl":"uint","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"uint& CurrentUint(int offset = 0)"},{"name":"CurrentFloat","returntypedecl":"float","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"float& CurrentFloat(int offset = 0)"},{"name":"CurrentString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"string& CurrentString(int offset = 0)"},{"name":"CurrentWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"wstring& CurrentWString(int offset = 0)"},{"name":"CurrentId","returntypeid":67108876,"returntypename":"MwId","returntypedecl":"MwId","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwId& CurrentId(int offset = 0)"},{"name":"CurrentBufferBool","returntypeid":268438629,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<bool>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<bool>& CurrentBufferBool(int offset = 0)"},{"name":"CurrentBufferNod","returntypeid":268438630,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<CMwNod@>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<CMwNod@>& CurrentBufferNod(int offset = 0)"},{"name":"CurrentBufferEnum","returntypeid":268438631,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<int>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<int>& CurrentBufferEnum(int offset = 0)"},{"name":"CurrentBufferIso4","returntypeid":268435577,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<iso4>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<iso4>& CurrentBufferIso4(int offset = 0)"},{"name":"CurrentBufferVec2","returntypeid":268438632,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<vec2>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<vec2>& CurrentBufferVec2(int offset = 0)"},{"name":"CurrentBufferVec3","returntypeid":268435578,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<vec3>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<vec3>& CurrentBufferVec3(int offset = 0)"},{"name":"CurrentBufferInt3","returntypeid":268435579,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<int3>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<int3>& CurrentBufferInt3(int offset = 0)"},{"name":"CurrentBufferNat3","returntypeid":268435580,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<nat3>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<nat3>& CurrentBufferNat3(int offset = 0)"},{"name":"CurrentBufferInt","returntypeid":268438631,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<int>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<int>& CurrentBufferInt(int offset = 0)"},{"name":"CurrentBufferUint","returntypeid":268438633,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<uint>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<uint>& CurrentBufferUint(int offset = 0)"},{"name":"CurrentBufferFloat","returntypeid":268438634,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<float>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<float>& CurrentBufferFloat(int offset = 0)"},{"name":"CurrentBufferString","returntypeid":268435581,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<string>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<string>& CurrentBufferString(int offset = 0)"},{"name":"CurrentBufferWString","returntypeid":268435582,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<wstring>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<wstring>& CurrentBufferWString(int offset = 0)"},{"name":"CurrentBufferId","returntypeid":268435583,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<MwId>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<MwId>& CurrentBufferId(int offset = 0)"},{"name":"Index","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Index()"},{"name":"Count","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Count()"}],"props":[]},{"id":268435516,"ns":"Dev","name":"ForceCast","group":"Dev","desc":"","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~ForceCast()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"ForceCast(int&in, const ?&in)"}}],"methods":[{"name":"Get","returntypeid":67112034,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[],"decl":"T& Get()"},{"name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Set(const ?&in)"}],"props":[]},{"id":67108925,"ns":"Dev","name":"HookInfo","group":"Dev","desc":"","behaviors":[],"methods":[],"props":[]},{"id":67108929,"ns":"Regex","name":"SearchAllResult","group":"Regex","desc":"Result of a call to `Regex::SearchAll`.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"opIndex","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"string[]@ opIndex(int index)"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length()"}],"props":[]},{"id":67108930,"ns":"Audio","name":"Sample","group":"Audio","desc":"Represents an audio file.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[],"props":[]},{"id":67108931,"ns":"Audio","name":"Voice","group":"Audio","desc":"Represents a currently playing voice of audio.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Play","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Play()"},{"name":"Pause","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Pause()"},{"name":"IsPaused","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsPaused()"},{"name":"GetGain","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetGain()"},{"name":"SetGain","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"gain"}],"decl":"void SetGain(float gain)"}],"props":[]},{"id":67108933,"ns":"Json","name":"Value","group":"Json","desc":"A value in a Json tree. Can be an array, object, or any other value.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Json::Value@ Value()"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"Json::Value@ Value(const string&in)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"Json::Value@ Value(int)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"Json::Value@ Value(float)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":""}],"decl":"Json::Value@ Value(double)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"Json::Value@ Value(bool)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"GetType","returntypeid":68,"returntypename":"Type","returntypedecl":"Json::Type","returntypeflags":0,"args":[],"decl":"Json::Type GetType() const"},{"name":"opIndex","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"Json::Value@ opIndex(const string&in)"},{"name":"opIndex","returntypeid":1677721669,"returntypename":"Value","returntypedecl":"const Json::Value@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"const Json::Value@ opIndex(const string&in) const"},{"name":"opIndex","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"Json::Value@ opIndex(int)"},{"name":"opIndex","returntypeid":1677721669,"returntypename":"Value","returntypedecl":"const Json::Value@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"const Json::Value@ opIndex(int) const"},{"name":"opImplConv","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string opImplConv() const"},{"name":"opImplConv","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int opImplConv() const"},{"name":"opImplConv","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float opImplConv() const"},{"name":"opImplConv","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double opImplConv() const"},{"name":"opImplConv","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool opImplConv() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"},{"name":"opAssign","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108933,"typename":"Value","typedecl":"Json::Value","typeflags":5,"name":""}],"decl":"Json::Value@ opAssign(const Json::Value&in)"},{"name":"Add","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850757,"typename":"Value","typedecl":"Json::Value@","typeflags":0,"name":""}],"decl":"void Add(Json::Value@)"},{"name":"Get","returntypeid":1140850757,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"Json::Value@ Get(const string&in key)"},{"name":"Get","returntypeid":1677721669,"returntypename":"Value","returntypedecl":"const Json::Value@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"const Json::Value@ Get(const string&in key) const"},{"name":"Get","returntypeid":1677721669,"returntypename":"Value","returntypedecl":"const Json::Value@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typeid":67108933,"typename":"Value","typedecl":"Json::Value","typeflags":5,"name":"def"}],"decl":"const Json::Value@ Get(const string&in key, const Json::Value&in def) const"},{"name":"HasKey","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"bool HasKey(const string&in key) const"},{"name":"Remove","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"void Remove(int index)"},{"name":"Remove","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"void Remove(const string&in key)"},{"name":"GetKeys","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ GetKeys() const"}],"props":[]},{"id":67108934,"ns":"XML","name":"Node","group":"XML","desc":"A node within an XML tree.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~Node()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"Node()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108934,"typename":"Node","typedecl":"XML::Node","typeflags":5,"name":""}],"decl":"Node(const XML::Node&in)"}}],"methods":[{"name":"opImplConv","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool opImplConv() const"},{"name":"opAssign","returntypeid":67108934,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":3,"args":[{"typeid":67108934,"typename":"Node","typedecl":"XML::Node","typeflags":5,"name":""}],"decl":"XML::Node& opAssign(const XML::Node&in)"},{"name":"Name","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Name() const","group":"XML","desc":"Get the tag name of the node. For example, <abc> will return \"abc\"."},{"name":"FirstChild","returntypeid":67108934,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[],"decl":"XML::Node FirstChild() const","group":"XML","desc":"Get the first child node within this node."},{"name":"LastChild","returntypeid":67108934,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[],"decl":"XML::Node LastChild() const","group":"XML","desc":"Get the last child node within this node."},{"name":"Child","returntypeid":67108934,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"XML::Node Child(const string&in name) const","group":"XML","desc":"Get the child node within this node that matches the tag name. For example, to get the tag <abc>, call Child(\"abc\")."},{"name":"NextSibling","returntypeid":67108934,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[],"decl":"XML::Node NextSibling() const","group":"XML","desc":"Get the next sibling in the parent of this node. For example, if the node you're calling it on is <abc>, it will return <def> in this tree: <root><abc/><def/></root>"},{"name":"Attribute","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"def","default":"\"\""}],"decl":"string Attribute(const string&in name, const string&in def = \"\") const","group":"XML","desc":"Get an attribute within this node. For example, the node <abc x=\"y\"> has an attribute named \"x\" with a value \"y\". If the attribute does not exist, the def parameter is returned."},{"name":"Content","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Content() const","group":"XML","desc":"Get the content text within this node."}],"props":[]},{"id":67108935,"ns":"XML","name":"Document","group":"XML","desc":"An XML tree document.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850759,"returntypename":"Document","returntypedecl":"XML::Document@","returntypeflags":0,"args":[],"decl":"XML::Document@ Document()"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850759,"returntypename":"Document","returntypedecl":"XML::Document@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"xml"}],"decl":"XML::Document@ Document(const string&in xml)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"LoadString","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"xml"}],"decl":"void LoadString(const string&in xml)","group":"XML","desc":"Load an XML tree into this document by parsing the given string."},{"name":"Root","returntypeid":67108934,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[],"decl":"XML::Node Root()","group":"XML","desc":"Get the root node of the document."}],"props":[]},{"id":67108936,"ns":"Import","name":"Library","group":"Import","desc":"A library representing a DLL. Instances of Library exist in between multiple plugins, and have to be loaded using Import::GetLibrary. When all instances of Library are destroyed, the dll is freed and unloaded.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"GetPath","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetPath() const"},{"name":"GetFunction","returntypeid":1140850761,"returntypename":"Function","returntypedecl":"Import::Function@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"symbol"}],"decl":"Import::Function@ GetFunction(const string&in symbol)","group":"Import","desc":"Gets a function exported from the library. The symbol must be matching exactly what is being exported. In the case of C++ code, this could be a mangled name too!"}],"props":[]},{"id":67108937,"ns":"Import","name":"Function","group":"Import","desc":"An imported symbol from a library.","behaviors":[],"methods":[{"name":"GetLibrary","returntypeid":1140850760,"returntypename":"Library","returntypedecl":"Import::Library@","returntypeflags":0,"args":[],"decl":"Import::Library@ GetLibrary()","group":"Import","desc":"Gets the Library from which this function is loaded."},{"name":"SetConvention","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":75,"typename":"CallConvention","typedecl":"Import::CallConvention","typeflags":0,"name":"convention"}],"decl":"void SetConvention(Import::CallConvention convention)","group":"Import","desc":"Sets the call convention for this function. Note that on Windows x64, this function does nothing because there is only one convention."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Call()","group":"Import","desc":"Calls the function and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns void."},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns void."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CallBool()","group":"Import","desc":"Calls the function and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns bool."},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns bool."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 CallInt8()","group":"Import","desc":"Calls the function and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns int8."},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns int8."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 CallInt16()","group":"Import","desc":"Calls the function and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns int16."},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns int16."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int CallInt32()","group":"Import","desc":"Calls the function and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns int32."},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns int32."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 CallInt64()","group":"Import","desc":"Calls the function and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns int64."},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns int64."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 CallUInt8()","group":"Import","desc":"Calls the function and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns uint8."},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns uint8."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 CallUInt16()","group":"Import","desc":"Calls the function and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns uint16."},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns uint16."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint CallUInt32()","group":"Import","desc":"Calls the function and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns uint32."},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns uint32."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 CallUInt64()","group":"Import","desc":"Calls the function and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns uint64."},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns uint64."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float CallFloat()","group":"Import","desc":"Calls the function and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns float."},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns float."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double CallDouble()","group":"Import","desc":"Calls the function and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns double."},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns double."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 CallPointer()","group":"Import","desc":"Calls the function and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns IntPtr."},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns IntPtr."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[],"decl":"CMwNod@ CallNod()","group":"Import","desc":"Calls the function and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns CMwNod@."},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns CMwNod@."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string CallString()","group":"Import","desc":"Calls the function and returns string. Return type must be a valid C string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns string."},{"name":"CallString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns string."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[],"decl":"wstring CallWString()","group":"Import","desc":"Calls the function and returns wstring. Return type must be a valid wide C string."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns wstring."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns wstring."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns wstring."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns wstring."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns wstring."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns wstring."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns wstring."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns wstring."},{"name":"CallWString","returntypeid":67108887,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns wstring."}],"props":[]},{"id":67108938,"ns":"Import","name":"Ref","group":"Import","desc":"A reference to a script variable.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850762,"returntypename":"Ref","returntypedecl":"Import::Ref@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"Import::Ref@ Ref(const string&in name)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850762,"returntypename":"Ref","returntypedecl":"Import::Ref@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":"obj"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"Import::Ref@ Ref(?&in obj, const string&in name)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[],"props":[]},{"id":67108941,"ns":"IO","name":"File","group":"IO","desc":"Manages a file reading or writing stream.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~File()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"File()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"File(const string&in filename)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"},{"typeid":76,"typename":"FileMode","typedecl":"IO::FileMode","typeflags":0,"name":"mode"}],"decl":"File(const string&in filename, IO::FileMode mode)"}}],"methods":[{"name":"Open","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"},{"typeid":76,"typename":"FileMode","typedecl":"IO::FileMode","typeflags":0,"name":"mode"}],"decl":"void Open(const string&in filename, IO::FileMode mode)"},{"name":"Open","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":76,"typename":"FileMode","typedecl":"IO::FileMode","typeflags":0,"name":"mode"}],"decl":"void Open(IO::FileMode mode)"},{"name":"Close","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Close()"},{"name":"Size","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Size()"},{"name":"EOF","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool EOF()"},{"name":"Flush","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Flush()"},{"name":"GetMode","returntypeid":76,"returntypename":"FileMode","returntypedecl":"IO::FileMode","returntypeflags":0,"args":[],"decl":"IO::FileMode GetMode()"},{"name":"SetPos","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"pos"}],"decl":"void SetPos(uint64 pos)"},{"name":"Pos","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Pos()"},{"name":"Read","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"MemoryBuffer@ Read(uint64 size)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":"buffer"}],"decl":"void Write(const MemoryBuffer&in buffer)"},{"name":"ReadLine","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadLine()"},{"name":"ReadToEnd","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadToEnd()"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":5,"name":"i"}],"decl":"void Write(const uint8&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":5,"name":"i"}],"decl":"void Write(const uint16&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":5,"name":"i"}],"decl":"void Write(const uint&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":5,"name":"i"}],"decl":"void Write(const uint64&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":5,"name":"i"}],"decl":"void Write(const int8&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":5,"name":"i"}],"decl":"void Write(const int16&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":5,"name":"i"}],"decl":"void Write(const int&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":5,"name":"i"}],"decl":"void Write(const int64&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":5,"name":"i"}],"decl":"void Write(const float&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":5,"name":"i"}],"decl":"void Write(const double&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void Write(const string&in str)"},{"name":"WriteLine","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str","default":"\"\""}],"decl":"void WriteLine(const string&in str = \"\")"}],"props":[]},{"id":67108942,"ns":"IO","name":"FileSource","group":"IO","desc":"Manages a file reading stream from a file source, such as a plugin's zip or folder contents.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~FileSource()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"FileSource(const string&in filename)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108942,"typename":"FileSource","typedecl":"IO::FileSource","typeflags":5,"name":""}],"decl":"FileSource(const IO::FileSource&in)"}}],"methods":[{"name":"Size","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Size()"},{"name":"EOF","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool EOF()"},{"name":"SetPos","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"pos"}],"decl":"void SetPos(uint64 pos)"},{"name":"Pos","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Pos()"},{"name":"Read","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"MemoryBuffer@ Read(uint64 size)"},{"name":"ReadLine","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadLine()"},{"name":"ReadToEnd","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadToEnd()"}],"props":[]},{"id":67108943,"ns":"Settings","name":"Section","group":"Settings","desc":"Represents a section in the settings file.","behaviors":[],"methods":[{"name":"Clear","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Clear()"},{"name":"GetBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"bool","typeflags":0,"name":"def","default":"false"}],"decl":"bool GetBool(const string&in key, bool def = false)"},{"name":"GetInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"int","typeflags":0,"name":"def","default":"0"}],"decl":"int GetInt(const string&in key, int def = 0)"},{"name":"GetFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"float","typeflags":0,"name":"def","default":"0.0f"}],"decl":"float GetFloat(const string&in key, float def = 0.0f)"},{"name":"GetString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"def","default":"\"\""}],"decl":"string GetString(const string&in key, const string&in def = \"\")"},{"name":"SetBool","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"bool","typeflags":0,"name":"def","default":"false"}],"decl":"void SetBool(const string&in key, bool def = false)"},{"name":"SetInt","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"int","typeflags":0,"name":"def","default":"0"}],"decl":"void SetInt(const string&in key, int def = 0)"},{"name":"SetFloat","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"float","typeflags":0,"name":"def","default":"0.0f"}],"decl":"void SetFloat(const string&in key, float def = 0.0f)"},{"name":"SetString","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"def","default":"\"\""}],"decl":"void SetString(const string&in key, const string&in def = \"\")"},{"name":"GetKeys","returntypeid":1342180445,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ GetKeys()"}],"props":[]},{"id":67108944,"ns":"SQLite","name":"Statement","group":"SQLite","desc":"A prepared SQLite statement and result set.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Reset","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Reset()"},{"name":"Execute","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Execute()"},{"name":"NextRow","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool NextRow()"},{"name":"GetQuery","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetQuery()"},{"name":"GetQueryExpanded","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetQueryExpanded()"},{"name":"GetColumnCount","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetColumnCount()"},{"name":"GetColumnName","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"string GetColumnName(int index)"},{"name":"GetColumnFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"float GetColumnFloat(const string&in name)"},{"name":"GetColumnDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"double GetColumnDouble(const string&in name)"},{"name":"GetColumnInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"int GetColumnInt(const string&in name)"},{"name":"GetColumnInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"int64 GetColumnInt64(const string&in name)"},{"name":"GetColumnString","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"string GetColumnString(const string&in name)"},{"name":"GetColumnBuffer","returntypeid":1140850728,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"MemoryBuffer@ GetColumnBuffer(const string&in name)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typedecl":"float","typeflags":0,"name":""}],"decl":"void Bind(int index, float)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typedecl":"double","typeflags":0,"name":""}],"decl":"void Bind(int index, double)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typedecl":"int64","typeflags":0,"name":""}],"decl":"void Bind(int index, int64)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void Bind(int index, const string&in)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":""}],"decl":"void Bind(int index, const MemoryBuffer&in)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"float","typeflags":0,"name":""}],"decl":"void Bind(const string&in name, float)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"double","typeflags":0,"name":""}],"decl":"void Bind(const string&in name, double)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"int64","typeflags":0,"name":""}],"decl":"void Bind(const string&in name, int64)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void Bind(const string&in name, const string&in)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typeid":67108904,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":""}],"decl":"void Bind(const string&in name, const MemoryBuffer&in)"}],"props":[]},{"id":67108945,"ns":"SQLite","name":"Database","group":"SQLite","desc":"An SQLite database.","behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850769,"returntypename":"Database","returntypedecl":"SQLite::Database@","returntypeflags":0,"args":[],"decl":"SQLite::Database@ Database()"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850769,"returntypename":"Database","returntypedecl":"SQLite::Database@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"SQLite::Database@ Database(const string&in path)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Execute","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"query"}],"decl":"void Execute(const string&in query)","group":"SQLite","desc":"Run a query directly against the database without binding any parameters or returning any rows."},{"name":"Prepare","returntypeid":1140850768,"returntypename":"Statement","returntypedecl":"SQLite::Statement@","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"query"}],"decl":"SQLite::Statement@ Prepare(const string&in query)","group":"SQLite","desc":"Prepare a query in the database. The query is not executed immediately."}],"props":[]},{"id":67108947,"ns":"Discord","name":"Status","group":"Discord","desc":"A Discord status update.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~Status()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"Status()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108947,"typename":"Status","typedecl":"Discord::Status","typeflags":5,"name":""}],"decl":"Status(const Discord::Status&in)"}}],"methods":[],"props":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"State"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"Details"},{"typedecl":"int64","typeflags":0,"name":"StartTimestamp"},{"typedecl":"int64","typeflags":0,"name":"EndTimestamp"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"LargeImageKey"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"LargeImageText"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"SmallImageKey"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"SmallImageText"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"PartyId"},{"typedecl":"int","typeflags":0,"name":"PartySize"},{"typedecl":"int","typeflags":0,"name":"PartyMax"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"MatchSecret"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"JoinSecret"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"SpectateSecret"}]},{"id":67108948,"ns":"Discord","name":"User","group":"Discord","desc":"Information about a user.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[],"props":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"ID"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"Name"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"Discriminator"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":0,"name":"Avatar"}]},{"id":67108949,"ns":"nvg","name":"Texture","group":"NanoVG","desc":"Represents a texture for the NanoVG API.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"GetSize","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetSize()","group":"NanoVG","desc":"Gets the size of the texture in pixels."}],"props":[]},{"id":67108951,"ns":"nvg","name":"Paint","group":"NanoVG","desc":"A paint style that can be used as a fill or a stroke.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~Paint()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"Paint()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108951,"typename":"Paint","typedecl":"nvg::Paint","typeflags":5,"name":""}],"decl":"Paint(const nvg::Paint&in)"}}],"methods":[{"name":"opAssign","returntypeid":67108951,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":3,"args":[{"typeid":67108951,"typename":"Paint","typedecl":"nvg::Paint","typeflags":5,"name":""}],"decl":"nvg::Paint& opAssign(const nvg::Paint&in)"}],"props":[]},{"id":67108955,"ns":"UI","name":"Texture","group":"UI","desc":"Represents a texture for the UI API.","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"GetSize","returntypeid":67108891,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetSize()","group":"UI","desc":"Gets the size of the texture in pixels."}],"props":[]},{"id":67108956,"ns":"UI","name":"Font","group":"UI","desc":"Represents a font for the UI API.","behaviors":[],"methods":[{"name":"get_FontSize","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_FontSize()","group":"UI","desc":"Gets the size of the font."}],"props":[]},{"id":67108959,"ns":"UI","name":"ListClipper","group":"UI","desc":"Helper class to manually clip large lists of items. To use this, create an instance on the stack. Call Begin, or pass an item count the constructor which will call Begin for you. Make a while loop with the condition `clipper.Step()`. Inside of the loop, make a for loop with `int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++`. Inside of the for loop, put whatever UI elements you need for the item at index i. Remember that all UI items in the list must be the same height for ListClipper to work.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~ListClipper()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"items_count","default":"- 1"},{"typedecl":"float","typeflags":0,"name":"items_height","default":"- 1.0f"}],"decl":"ListClipper(int items_count = - 1, float items_height = - 1.0f)"}}],"methods":[{"name":"Begin","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"items_count"},{"typedecl":"float","typeflags":0,"name":"items_height","default":"- 1.0f"}],"decl":"void Begin(int items_count, float items_height = - 1.0f)","group":"UI","desc":""},{"name":"Step","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool Step()","group":"UI","desc":"Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items."},{"name":"End","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void End()","group":"UI","desc":"Automatically called on the last call of Step() that returns false."}],"props":[{"typedecl":"int","typeflags":0,"name":"DisplayStart"},{"typedecl":"int","typeflags":0,"name":"DisplayEnd"},{"typedecl":"int","typeflags":0,"name":"ItemsCount"},{"typedecl":"float","typeflags":0,"name":"ItemsHeight"}]},{"id":67108978,"ns":"UI","name":"InputTextCallbackData","group":"UI","desc":"Callback data for text input widgets. Do not keep handles of this around!","behaviors":[],"methods":[{"name":"get_Text","returntypeid":67108886,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Text()"},{"name":"set_Text","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void set_Text(const string&in text)"},{"name":"DeleteChars","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"pos"},{"typedecl":"int","typeflags":0,"name":"bytes_count"}],"decl":"void DeleteChars(int pos, int bytes_count)"},{"name":"InsertChars","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"pos"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void InsertChars(int pos, const string&in text)"},{"name":"SelectAll","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SelectAll()"},{"name":"ClearSelection","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ClearSelection()"},{"name":"HasSelection","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool HasSelection()"}],"props":[{"typeid":104,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"EventFlag"},{"typeid":104,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"Flags"},{"typedecl":"uint","typeflags":0,"name":"EventChar"},{"typeid":112,"typename":"Key","typedecl":"UI::Key","typeflags":0,"name":"EventKey"},{"typedecl":"int","typeflags":0,"name":"TextLength"},{"typedecl":"int","typeflags":0,"name":"CursorPos"},{"typedecl":"int","typeflags":0,"name":"SelectionStart"},{"typedecl":"int","typeflags":0,"name":"SelectionEnd"}]},{"id":67108980,"ns":"UI","name":"TableColumnSortSpecs","group":"UI","desc":"Sorting specification for a single column of a table.","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~TableColumnSortSpecs()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"TableColumnSortSpecs()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108980,"typename":"TableColumnSortSpecs","typedecl":"UI::TableColumnSortSpecs","typeflags":5,"name":""}],"decl":"TableColumnSortSpecs(const UI::TableColumnSortSpecs&in)"}}],"methods":[{"name":"get_SortDirection","returntypeid":110,"returntypename":"SortDirection","returntypedecl":"UI::SortDirection","returntypeflags":0,"args":[],"decl":"UI::SortDirection get_SortDirection()"}],"props":[{"typedecl":"uint","typeflags":0,"name":"ColumnUserID"},{"typedecl":"int16","typeflags":0,"name":"ColumnIndex"},{"typedecl":"int16","typeflags":0,"name":"SortOrder"}]},{"id":67108981,"ns":"UI","name":"TableSortSpecs","group":"UI","desc":"Sorting information for tables. Do not keep this object around! Use the Dirty property to see if the sorting changed, then set it to false when you've sorted your list.","behaviors":[],"methods":[{"name":"get_Specs","returntypeid":1342180459,"returntypename":"array","returntypedecl":"UI::TableColumnSortSpecs[]@","returntypeflags":0,"args":[],"decl":"UI::TableColumnSortSpecs[]@ get_Specs()"}],"props":[{"typedecl":"bool","typeflags":0,"name":"Dirty"}]},{"id":67108982,"ns":"UI","name":"DrawList","group":"UI","desc":"A drawing list for a layer on the UI.","behaviors":[],"methods":[{"name":"PushClipRect","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"rect"},{"typedecl":"bool","typeflags":0,"name":"intersectWithCurrentClipRect","default":"false"}],"decl":"void PushClipRect(const vec4&in rect, bool intersectWithCurrentClipRect = false)","group":"UI","desc":"Pushes a scissoring rectangle to the stack."},{"name":"PushClipRectFullScreen","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PushClipRectFullScreen()","group":"UI","desc":"Pushes a fullscreen scissoring rectangle to the stack."},{"name":"PopClipRect","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopClipRect()","group":"UI","desc":"Pops a previously pushed scissoring rectangle to the stack."},{"name":"AddRect","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"rect"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"rounding","default":"0.0f"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddRect(const vec4&in rect, const vec4&in color, float rounding = 0.0f, float thickness = 1.0f)","group":"UI","desc":"Draws a border rectangle."},{"name":"AddRectFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"rect"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"rounding","default":"0.0f"}],"decl":"void AddRectFilled(const vec4&in rect, const vec4&in color, float rounding = 0.0f)","group":"UI","desc":"Draws a filled rectangle."},{"name":"AddRectFilledMultiColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"rect"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colUL"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colUR"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colBL"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colBR"}],"decl":"void AddRectFilledMultiColor(const vec4&in rect, const vec4&in colUL, const vec4&in colUR, const vec4&in colBL, const vec4&in colBR)","group":"UI","desc":"Draws a filled rectangle."},{"name":"AddQuad","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"topLeft"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"topRight"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bottomRight"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bottomLeft"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddQuad(const vec2&in topLeft, const vec2&in topRight, const vec2&in bottomRight, const vec2&in bottomLeft, const vec4&in color, float thickness = 1.0f)","group":"UI","desc":"Draws a border quad."},{"name":"AddQuadFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"topLeft"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"topRight"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bottomRight"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bottomLeft"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"}],"decl":"void AddQuadFilled(const vec2&in topLeft, const vec2&in topRight, const vec2&in bottomRight, const vec2&in bottomLeft, const vec4&in color)","group":"UI","desc":"Draws a filled quad."},{"name":"AddTriangle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p1"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p2"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p3"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddTriangle(const vec2&in p1, const vec2&in p2, const vec2&in p3, const vec4&in color, float thickness = 1.0f)","group":"UI","desc":"Draws a border triangle."},{"name":"AddQuadFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p1"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p2"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p3"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"}],"decl":"void AddQuadFilled(const vec2&in p1, const vec2&in p2, const vec2&in p3, const vec4&in color)","group":"UI","desc":"Draws a filled triangle."},{"name":"AddCircle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typedecl":"float","typeflags":0,"name":"radius"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"segments","default":"0"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddCircle(const vec2&in pos, float radius, const vec4&in color, int segments = 0, float thickness = 1.0f)","group":"UI","desc":"Draws a border circle."},{"name":"AddCircleFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typedecl":"float","typeflags":0,"name":"radius"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"segments","default":"0"}],"decl":"void AddCircleFilled(const vec2&in pos, float radius, const vec4&in color, int segments = 0)","group":"UI","desc":"Draws a filled circle."},{"name":"AddNgon","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typedecl":"float","typeflags":0,"name":"radius"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"segments"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddNgon(const vec2&in pos, float radius, const vec4&in color, int segments, float thickness = 1.0f)","group":"UI","desc":"Draws a border N-gon."},{"name":"AddNgonFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typedecl":"float","typeflags":0,"name":"radius"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"segments"}],"decl":"void AddNgonFilled(const vec2&in pos, float radius, const vec4&in color, int segments)","group":"UI","desc":"Draws a filled N-gon."},{"name":"AddLine","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddLine(const vec2&in a, const vec2&in b, const vec4&in color, float thickness = 1.0f)","group":"UI","desc":"Draws a line."},{"name":"AddText","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typeid":67108886,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typeid":1140850780,"typename":"Font","typedecl":"UI::Font@","typeflags":0,"name":"font","default":"null"},{"typedecl":"float","typeflags":0,"name":"size","default":"0.0f"},{"typedecl":"float","typeflags":0,"name":"wrapWidth","default":"0.0f"}],"decl":"void AddText(const vec2&in pos, const vec4&in color, const string&in str, UI::Font@ font = null, float size = 0.0f, float wrapWidth = 0.0f)","group":"UI","desc":"Draws a text."},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850779,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos)","group":"UI","desc":"Draws a texture."},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850779,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos, const vec2&in size)","group":"UI","desc":"Draws a texture scaled to a specific size."},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850779,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"uint","typeflags":0,"name":"color"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos, const vec2&in size, uint color)","group":"UI","desc":"Draws a texture scaled to a specific size and blend color (in 0xRRGGBBAA hexadecimal format)."},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850779,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"uint","typeflags":0,"name":"color"},{"typedecl":"float","typeflags":0,"name":"rotation"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"origin","default":"vec2 ( 0 , 0 )"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos, const vec2&in size, uint color, float rotation, const vec2&in origin = vec2 ( 0 , 0 ))","group":"UI","desc":"Draws a texture scaled to a specific size, blend color (in 0xRRGGBBAA hexadecimal format), and rotation around an origin."},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850779,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108891,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"uint","typeflags":0,"name":"color"},{"typeid":67108893,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"uv"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos, const vec2&in size, uint color, const vec4&in uv)","group":"UI","desc":"Draws a texture with the given UV pixel offset."}],"props":[]}],"enums":[{"id":43,"ns":"Net","name":"HttpMethod","group":"Net","desc":"","values":{"Get":0,"Post":1,"Head":2,"Put":3,"Delete":4,"Patch":5}},{"id":49,"ns":"Meta","name":"PluginType","group":"Meta","desc":"The type of plugin.","values":{"Unknown":0,"Legacy":1,"Folder":2,"Zip":3}},{"id":50,"ns":"Meta","name":"PluginSource","group":"Meta","desc":"Where this plugin is loaded from.","values":{"Unknown":0,"ApplicationFolder":1,"UserFolder":2,"TitlePack":3}},{"id":51,"ns":"Meta","name":"PluginSettingType","group":"Meta","desc":"The type of this setting variable.","values":{"Unknown":0,"Bool":1,"Enum":2,"Float":3,"Double":4,"Int8":5,"Int16":6,"Int32":7,"String":8,"Vec2":9,"Vec3":10,"Vec4":11,"Uint8":12,"Uint16":13,"Uint32":14}},{"id":59,"ns":"Dev","name":"PushRegisters","group":"Dev","desc":"","values":{"SSE":1}},{"id":64,"ns":"Regex","name":"Flags","group":"Regex","desc":"Flags that can be passed to regular expression functions.","values":{"None":0,"CaseInsensitive":256,"NoSubs":512,"Optimize":1024,"Collate":2048,"ECMAScript":1,"Basic":2,"Extended":4,"Awk":8,"Grep":16,"Egrep":32}},{"id":68,"ns":"Json","name":"Type","group":"Json","desc":"Json value type that a Value might be.","values":{"String":1,"Number":2,"Object":3,"Array":4,"Boolean":5,"Null":6}},{"id":75,"ns":"Import","name":"CallConvention","group":"Import","desc":"The calling convention to use for this call on 32 bit builds. Convention options don't matter on 64 bit builds.","values":{"cdecl":0,"stdcall":1}},{"id":76,"ns":"IO","name":"FileMode","group":"IO","desc":"The file mode to put the file stream in.","values":{"None":0,"Read":1,"Write":2,"Append":3}},{"id":82,"ns":"Discord","name":"Response","group":"Discord","desc":"The response code for Discord::Respond().","values":{"No":0,"Yes":1,"Ignore":2}},{"id":86,"ns":"nvg","name":"TextureFlags","group":"NanoVG","desc":"Flags to use when loading NanoVG textures.","values":{"None":0,"GenerateMipmaps":1,"RepeatX":2,"RepeatY":4,"FlipY":8,"Premultiplied":16,"Nearest":32}},{"id":88,"ns":"nvg","name":"LineCapType","group":"NanoVG","desc":"","values":{"Butt":0,"Round":1,"Square":2,"Bevel":3,"Miter":4}},{"id":89,"ns":"nvg","name":"Winding","group":"NanoVG","desc":"","values":{"CCW":1,"CW":2}},{"id":90,"ns":"nvg","name":"Align","group":"NanoVG","desc":"","values":{"Left":1,"Center":2,"Right":4,"Top":8,"Middle":16,"Bottom":32,"Baseline":64}},{"id":93,"ns":"UI","name":"InputBlocking","group":"UI","desc":"How to handle inputs going forward.","values":{"DoNothing":0,"Block":1}},{"id":96,"ns":"UI","name":"WindowFlags","group":"UI","desc":"Window flags that can be passed to UI::Begin().","values":{"None":0,"NoTitleBar":1,"NoResize":2,"NoMove":4,"NoScrollbar":8,"NoScrollWithMouse":16,"NoCollapse":32,"AlwaysAutoResize":64,"NoSavedSettings":256,"MenuBar":1024,"HorizontalScrollbar":2048,"NoFocusOnAppearing":4096,"NoBringToFrontOnFocus":8192,"AlwaysVerticalScrollbar":16384,"AlwaysHorizontalScrollbar":32768,"AlwaysUseWindowPadding":65536,"NoNavInputs":262144,"NoNavFocus":524288,"UnsavedDocument":1048576,"NoDocking":2097152,"NoNav":786432,"NoDecoration":43,"NoInputs":786944}},{"id":97,"ns":"UI","name":"ButtonFlags","group":"UI","desc":"Button flags that can be passed to UI::InvisibleButton().","values":{"None":0,"MouseButtonLeft":1,"MouseButtonRight":2,"MouseButtonMiddle":4}},{"id":98,"ns":"UI","name":"Col","group":"UI","desc":"Color variables that can be passed to UI::PushStyleColor().","values":{"Text":0,"TextDisabled":1,"WindowBg":2,"ChildBg":3,"PopupBg":4,"Border":5,"BorderShadow":6,"FrameBg":7,"FrameBgHovered":8,"FrameBgActive":9,"TitleBg":10,"TitleBgActive":11,"TitleBgCollapsed":12,"MenuBarBg":13,"ScrollbarBg":14,"ScrollbarGrab":15,"ScrollbarGrabHovered":16,"ScrollbarGrabActive":17,"CheckMark":18,"SliderGrab":19,"SliderGrabActive":20,"Button":21,"ButtonHovered":22,"ButtonActive":23,"Header":24,"HeaderHovered":25,"HeaderActive":26,"Separator":27,"SeparatorHovered":28,"SeparatorActive":29,"ResizeGrip":30,"ResizeGripHovered":31,"ResizeGripActive":32,"Tab":33,"TabHovered":34,"TabActive":35,"TabUnfocused":36,"TabUnfocusedActive":37,"DockingPreview":38,"DockingEmptyBg":39,"PlotLines":40,"PlotLinesHovered":41,"PlotHistogram":42,"PlotHistogramHovered":43,"TableHeaderBg":44,"TableBorderStrong":45,"TableBorderLight":46,"TableRowBg":47,"TableRowBgAlt":48,"TextSelectedBg":49,"DragDropTarget":50,"NavHighlight":51,"NavWindowingHighlight":52,"NavWindowingDimBg":53,"ModalWindowDimBg":54}},{"id":99,"ns":"UI","name":"StyleVar","group":"UI","desc":"Style variables that can be passed to UI::PushStyleVar().","values":{"Alpha":0,"WindowPadding":2,"WindowRounding":3,"WindowBorderSize":4,"WindowMinSize":5,"WindowTitleAlign":6,"ChildRounding":7,"ChildBorderSize":8,"PopupRounding":9,"PopupBorderSize":10,"FramePadding":11,"FrameRounding":12,"FrameBorderSize":13,"ItemSpacing":14,"ItemInnerSpacing":15,"IndentSpacing":16,"CellPadding":17,"ScrollbarSize":18,"ScrollbarRounding":19,"GrabMinSize":20,"GrabRounding":21,"TabRounding":22,"ButtonTextAlign":23,"SelectableTextAlign":24}},{"id":100,"ns":"UI","name":"FocusedFlags","group":"UI","desc":"Flags for UI::IsWindowFocused().","values":{"None":0,"ChildWindows":1,"RootWindow":2,"AnyWindow":4,"RootAndChildWindows":3}},{"id":101,"ns":"UI","name":"ComboFlags","group":"UI","desc":"Combo flags that can be passed to UI::BeginCombo().","values":{"None":0,"PopupAlignLeft":1,"HeightSmall":2,"HeightRegular":4,"HeightLarge":8,"HeightLargest":16,"NoArrowButton":32,"NoPreview":64}},{"id":102,"ns":"UI","name":"SelectableFlags","group":"UI","desc":"Selectable flags that can be passed to UI::Selectable().","values":{"None":0,"DontClosePopups":1,"SpanAllColumns":2,"AllowDoubleClick":4,"Disabled":8,"AllowItemOverlap":16}},{"id":103,"ns":"UI","name":"TreeNodeFlags","group":"UI","desc":"Flags that can be passed to UI::TreeNode().","values":{"None":0,"Selected":1,"Framed":2,"AllowItemOverlap":4,"NoTreePushOnOpen":8,"NoAutoOpenOnLog":16,"DefaultOpen":32,"OpenOnDoubleClick":64,"OpenOnArrow":128,"Leaf":256,"Bullet":512,"FramePadding":1024,"SpanAvailWidth":2048,"SpanFullWidth":4096,"NavLeftJumpsBackHere":8192}},{"id":104,"ns":"UI","name":"InputTextFlags","group":"UI","desc":"Flags that can be passed to UI::InputText().","values":{"None":0,"CharsDecimal":1,"CharsHexadecimal":2,"CharsUppercase":4,"CharsNoBlank":8,"AutoSelectAll":16,"EnterReturnsTrue":32,"CallbackCompletion":64,"CallbackHistory":128,"CallbackAlways":256,"CallbackCharFilter":512,"AllowTabInput":1024,"CtrlEnterForNewLine":2048,"NoHorizontalScroll":4096,"AlwaysOverwrite":8192,"ReadOnly":16384,"Password":32768,"NoUndoRedo":65536,"CharsScientific":131072}},{"id":105,"ns":"UI","name":"TableFlags","group":"UI","desc":"Flags that can be passed to UI::BeginTable().","values":{"None":0,"Resizable":1,"Reorderable":2,"Hideable":4,"Sortable":8,"NoSavedSettings":16,"ContextMenuInBody":32,"RowBg":64,"BordersInnerH":128,"BordersOuterH":256,"BordersInnerV":512,"BordersOuterV":1024,"BordersH":384,"BordersV":1536,"BordersInner":640,"BordersOuter":1280,"Borders":1920,"NoBordersInBody":2048,"NoBordersInBodyUntilResize":4096,"SizingFixedFit":8192,"SizingFixedSame":16384,"SizingStretchProp":24576,"SizingStretchSame":32768,"NoHostExtendX":65536,"NoHostExtendY":131072,"NoKeepColumnsVisible":262144,"PreciseWidths":524288,"NoClip":1048576,"PadOuterX":2097152,"NoPadOuterX":4194304,"NoPadInnerX":8388608,"ScrollX":16777216,"ScrollY":33554432,"SortMulti":67108864,"SortTristate":134217728}},{"id":106,"ns":"UI","name":"TableRowFlags","group":"UI","desc":"Flags that can be passed to UI::TableNextRow().","values":{"None":0,"Headers":1}},{"id":107,"ns":"UI","name":"TableColumnFlags","group":"UI","desc":"Flags that can be passed to UI::TableSetupColumn().","values":{"None":0,"DefaultHide":2,"DefaultSort":4,"WidthStretch":8,"WidthFixed":16,"NoResize":32,"NoReorder":64,"NoHide":128,"NoClip":256,"NoSort":512,"NoSortAscending":1024,"NoSortDescending":2048,"NoHeaderWidth":8192,"PreferSortAscending":16384,"PreferSortDescending":32768,"IndentEnable":65536,"IndentDisable":131072,"IsEnabled":16777216,"IsVisible":33554432,"IsSorted":67108864,"IsHovered":134217728}},{"id":108,"ns":"UI","name":"TabBarFlags","group":"UI","desc":"Flags that can be passed to UI::BeginTab().","values":{"None":0,"Reorderable":1,"AutoSelectNewTabs":2,"TabListPopupButton":4,"NoCloseWithMiddleMouseButton":8,"NoTabListScrollingButtons":16,"NoTooltip":32,"FittingPolicyResizeDown":64,"FittingPolicyScroll":128}},{"id":109,"ns":"UI","name":"TabItemFlags","group":"UI","desc":"Flags that can be passed to UI::BeginTabItem().","values":{"None":0,"UnsavedDocument":1,"SetSelected":2,"NoCloseWithMiddleMouseButton":4,"NoPushId":8,"NoTooltip":16,"NoReorder":32,"Leading":64,"Trailing":128}},{"id":110,"ns":"UI","name":"SortDirection","group":"UI","desc":"","values":{"None":0,"Ascending":1,"Descending":2}},{"id":111,"ns":"UI","name":"Cond","group":"UI","desc":"Conditions for certain UI set operations.","values":{"None":0,"Always":1,"Once":2,"FirstUseEver":4,"Appearing":8}},{"id":112,"ns":"UI","name":"Key","group":"UI","desc":"UI-specific keys.","values":{"Tab":512,"LeftArrow":513,"RightArrow":514,"UpArrow":515,"DownArrow":516,"PageUp":517,"PageDown":518,"Home":519,"End":520,"Insert":521,"Delete":522,"Backspace":523,"Space":524,"Enter":525,"Escape":526,"KeyPadEnter":615,"A":546,"C":548,"V":567,"X":569,"Y":570,"Z":571}},{"id":113,"ns":"UI","name":"HoveredFlags","group":"UI","desc":"Flags that can be passed to IsItemHovered.","values":{"None":0,"ChildWindows":1,"RootWindow":2,"AnyWindow":4,"NoPopupHierarchy":8,"DockHierarchy":16,"AllowWhenBlockedByPopup":32,"AllowWhenBlockedByActiveItem":128,"AllowWhenOverlapped":256,"AllowWhenDisabled":512,"RectOnly":416,"RootAndChildWindows":3}},{"id":119,"ns":"","name":"VirtualKey","group":"Input","desc":"Virtual keys that can be pressed by the user and received in scripts.","values":{"LButton":1,"RButton":2,"Cancel":3,"Mbutton":4,"XButton1":5,"XButton2":6,"Back":8,"Tab":9,"Clear":12,"Return":13,"Shift":16,"Control":17,"Menu":18,"Pause":19,"Capital":20,"Kana":21,"Hanguel":21,"Hangul":21,"Junja":23,"Final":24,"Hanja":25,"Kanji":25,"Escape":27,"Convert":28,"NonConvert":29,"Accept":30,"ModeChange":31,"Space":32,"Prior":33,"Next":34,"End":35,"Home":36,"Left":37,"Up":38,"Right":39,"Down":40,"Select":41,"Print":42,"Execute":43,"Snapshot":44,"Insert":45,"Delete":46,"Help":47,"N0":48,"N1":49,"N2":50,"N3":51,"N4":52,"N5":53,"N6":54,"N7":55,"N8":56,"N9":57,"A":65,"B":66,"C":67,"D":68,"E":69,"F":70,"G":71,"H":72,"I":73,"J":74,"K":75,"L":76,"M":77,"N":78,"O":79,"P":80,"Q":81,"R":82,"S":83,"T":84,"U":85,"V":86,"W":87,"X":88,"Y":89,"Z":90,"Lwin":91,"Rwin":92,"Apps":93,"Sleep":95,"Numpad0":96,"Numpad1":97,"Numpad2":98,"Numpad3":99,"Numpad4":100,"Numpad5":101,"Numpad6":102,"Numpad7":103,"Numpad8":104,"Numpad9":105,"Multiply":106,"Add":107,"Separator":108,"Subtract":109,"Decimal":110,"Divide":111,"F1":112,"F2":113,"F3":114,"F4":115,"F5":116,"F6":117,"F7":118,"F8":119,"F9":120,"F10":121,"F11":122,"F12":123,"F13":124,"F14":125,"F15":126,"F16":127,"F17":128,"F18":129,"F19":130,"F20":131,"F21":132,"F22":133,"F23":134,"F24":135,"NumLock":144,"Scroll":145,"LShift":160,"RShift":161,"LControl":162,"RControl":163,"LMenu":164,"RMenu":165,"BrowserBack":166,"BrowserForward":167,"BrowserRefresh":168,"BrowserStop":169,"BrowserSearch":170,"BrowserFavorites":171,"BrowserHome":172,"VolumeMute":173,"VolumeDown":174,"VolumeUp":175,"MediaNextTrack":176,"MediaPrevTrack":177,"MediaStop":178,"MediaPlayPause":179,"LaunchMail":180,"LaunchMediaSelect":181,"LaunchApp1":182,"LaunchApp2":183,"Oem1":186,"OemPlus":187,"OemComma":188,"OemMinus":189,"OemPeriod":190,"Oem2":191,"Oem3":192,"Oem4":219,"Oem5":220,"Oem6":221,"Oem7":222,"Oem8":223,"Oem102":226,"ProcessKey":229,"Packet":231,"Attn":246,"Crsel":247,"Exsel":248,"Ereof":249,"Play":250,"Zoom":251,"Noname":252,"Pa1":253,"OemClear":254}}]}